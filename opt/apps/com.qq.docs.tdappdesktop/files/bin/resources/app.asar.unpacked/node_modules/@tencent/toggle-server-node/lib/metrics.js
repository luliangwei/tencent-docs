"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var url_1 = require("url");
var request_1 = require("request");
var uuidv4_1 = require("uuidv4");
var os = require("os");
var urlencode = require("urlencode");
var dtoJce_1 = require("./dtoJce");
var util_1 = require("./util");
var constants = require("./constants");
var Atta = require('@tencent/atta');
var REPORT_SUFFIX = '/report/feature-trigger-event';
var MAX_METRICS = 500;
var l5RetSuccess = 0;
var l5RetHttpClientDoErr = -1;
var Metrics = /** @class */ (function (_super) {
    __extends(Metrics, _super);
    function Metrics(_a) {
        var productEn = _a.productEn, productId = _a.productId, moduleId = _a.moduleId, version = _a.version, statsDomain = _a.statsDomain, disableMetrics = _a.disableMetrics, metricsInterval = _a.metricsInterval, timeout = _a.timeout, useL5 = _a.useL5, configL5ModId = _a.configL5ModId, configL5CmdId = _a.configL5CmdId;
        var _this = _super.call(this) || this;
        _this.productEn = productEn;
        _this.productId = productId;
        _this.moduleId = moduleId;
        _this.version = version;
        _this.statsDomain = statsDomain;
        _this.disabled = disableMetrics;
        _this.metricsInterval = metricsInterval || 0;
        _this.timeout = timeout;
        // init atta
        _this.atta = new Atta();
        _this.atta.initProtocol('udp');
        // l5
        _this.useL5 = useL5;
        _this.accessSet = {
            l5ModId: String(configL5ModId),
            l5CmdId: String(configL5CmdId),
        };
        _this.configL5ModId = configL5ModId;
        _this.configL5CmdId = configL5CmdId;
        _this.eventCount = 0;
        _this.resetBucket();
        if (typeof _this.metricsInterval === 'number' && _this.metricsInterval > 0) {
            _this.startTimer();
        }
        return _this;
    }
    Metrics.prototype.saveFeatureEvent = function (feature, enabledResult, ctx, abTestId) {
        if (this.disabled) {
            return false;
        }
        var eventKey = this.stringifyEvent(this.createEventKey(feature, enabledResult, ctx, abTestId));
        if (!this.hasSameEvent(eventKey)) {
            this.bucket.triggers.eventsMap.set(eventKey, 1);
            this.eventCount++;
        }
        this.emit('trigger', this.parseEventString(eventKey));
        if (this.eventCount >= MAX_METRICS) {
            this.sendMetrics();
        }
        return true;
    };
    Metrics.prototype.stop = function () {
        if (!this.disabled) {
            this.sendMetrics();
        }
        if (this.timer) {
            clearInterval(this.timer);
            delete this.timer;
        }
        this.disabled = true;
    };
    Metrics.prototype.reportTabMetricsData = function (feature, tabReportData, expInfo) {
        if (!this.productId ||
            !feature ||
            !feature.id ||
            !tabReportData.guid ||
            !tabReportData.appId ||
            !tabReportData.expId ||
            !expInfo.experimentCode) {
            this.emit('error', Error("the following attributes can't be undefined. \n            feature productId:" + this.productId + "; feature id:" + (feature === null || feature === void 0 ? void 0 : feature.id.toString()) + "; \n            guid:" + (tabReportData === null || tabReportData === void 0 ? void 0 : tabReportData.guid) + "; app id:" + (tabReportData === null || tabReportData === void 0 ? void 0 : tabReportData.appId) + "; exp id:" + (tabReportData === null || tabReportData === void 0 ? void 0 : tabReportData.expId) + "\n            gray id:" + expInfo.experimentCode));
            return;
        }
        var serverTime = util_1.getAdjustedShanghaiTime().unix();
        var featurePercentage = expInfo[constants.TabPercentage] || '';
        var data = {
            uin: tabReportData.guid,
            utype: '',
            businessId: this.productId,
            featureId: feature.id.toString(),
            featureName: feature.name,
            featurePercentage: featurePercentage,
            eventTime: serverTime,
            reportTime: serverTime,
            tabBussinessId: tabReportData.appId,
            expId: tabReportData.expId,
            eventCode: constants.TabReportEventCode,
            eventValue: {},
            experimentCode: expInfo.experimentCode,
        };
        if (typeof data.eventValue !== 'object') {
            data.eventValue = '';
        }
        else {
            data.eventValue = urlencode.stringify(data.eventValue, { charset: 'utf8' });
        }
        if (typeof tabReportData.customField !== 'object') {
            data.reserved = '';
        }
        else {
            data.reserved = urlencode.stringify(tabReportData.customField, { charset: 'utf8' });
        }
        var dataValueList = Object.values(data);
        var dataValue = dataValueList[0];
        for (var i = 1; i < dataValueList.length; i++) {
            dataValue += "|" + dataValueList[i];
        }
        this.atta.send_string(constants.AttaId, constants.AttaToken, dataValue);
        this.emit('sent', 'sent tab metrics data successfully');
    };
    Metrics.prototype.bucketIsEmpty = function () {
        return !(this.bucket.triggers.eventsMap.size > 0);
    };
    Metrics.prototype.resetBucket = function () {
        this.bucket = {
            start: new Date(),
            stop: null,
            triggers: {
                sdkType: 'NodeJs',
                sdkVersion: util_1.getSdkVersion(),
                startTime: util_1.dateFormat(new Date()),
                stopTime: '',
                productId: this.productId,
                moduleId: this.moduleId,
                moduleVersion: this.version,
                os: os.platform(),
                osVersion: os.release(),
                uploadIp: util_1.getIpAddress(),
                eventsMap: new Map(),
            },
        };
    };
    Metrics.prototype.closeBucket = function () {
        if (this.bucket) {
            this.bucket.stop = new Date();
            this.bucket.triggers.stopTime = util_1.dateFormat(new Date());
        }
    };
    Metrics.prototype.startTimer = function () {
        var _this = this;
        if (this.disabled) {
            return false;
        }
        this.timer = setTimeout(function () {
            _this.sendMetrics();
        }, this.metricsInterval);
        if (process.env.NODE_ENV !== 'test') {
            this.timer.unref();
        }
        return true;
    };
    Metrics.prototype.sendMetrics = function () {
        return __awaiter(this, void 0, void 0, function () {
            var payload, reportEventReq, buf, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.disabled) {
                            return [2 /*return*/, Promise.resolve(false)];
                        }
                        // No feature event to send
                        if (this.bucketIsEmpty()) {
                            this.resetBucket();
                            this.startTimer();
                            return [2 /*return*/, Promise.resolve(true)];
                        }
                        // Time for next sending
                        this.startTimer();
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        payload = this.getPayload();
                        reportEventReq = new dtoJce_1.dto.ReportFeatureTriggerEventReq();
                        reportEventReq.readFromObject(payload);
                        return [4 /*yield*/, util_1.packRequest(reportEventReq)];
                    case 2:
                        buf = _a.sent();
                        // Req function
                        this.doPost(buf, constants.MAX_HTTP_RETRY, reportEventReq.toObject());
                        return [3 /*break*/, 4];
                    case 3:
                        err_1 = _a.sent();
                        this.emit('warn', err_1);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/, Promise.resolve(true)];
                }
            });
        });
    };
    Metrics.prototype.doPost = function (payload, retry, sent) {
        return __awaiter(this, void 0, void 0, function () {
            var l5Config_1, url, start_1, err_2;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        url = void 0;
                        if (!this.useL5) return [3 /*break*/, 2];
                        return [4 /*yield*/, util_1.getL5(+(this.accessSet.l5ModId || this.configL5ModId), +(this.accessSet.l5CmdId || this.configL5CmdId))];
                    case 1:
                        l5Config_1 = _a.sent();
                        url = "http://" + l5Config_1.ip + ":" + l5Config_1.port + REPORT_SUFFIX;
                        return [3 /*break*/, 3];
                    case 2:
                        url = url_1.resolve(this.statsDomain, REPORT_SUFFIX);
                        _a.label = 3;
                    case 3:
                        start_1 = Date.now();
                        request_1.post({
                            url: url,
                            headers: util_1.getCommonHeaders(this.productEn),
                            body: payload,
                            encoding: null,
                            timeout: this.timeout,
                        }, function (err, resp) {
                            // Report L5
                            if (_this.useL5 && l5Config_1) {
                                var l5Ret = err
                                    ? l5RetHttpClientDoErr
                                    : resp.statusCode >= constants.HTTP_SERVER_ERROR_CODE
                                        ? -resp.statusCode
                                        : l5RetSuccess;
                                util_1.reportL5(l5Config_1, Date.now() - start_1, l5Ret);
                            }
                            // Return on err request
                            if (err) {
                                return _this.emit('warn', err);
                            }
                            // Retry on 5xx resp
                            if (resp.statusCode >= constants.HTTP_SERVER_ERROR_CODE && retry > 0) {
                                retry = retry - 1;
                                return _this.doPost(payload, retry, sent);
                            }
                            if (resp.statusCode !== constants.HTTP_OK_CODE) {
                                return _this.emit('warn', new Error("Report events response statusCode was " + resp.statusCode));
                            }
                            return _this.emit('sent', sent);
                        });
                        return [3 /*break*/, 5];
                    case 4:
                        err_2 = _a.sent();
                        this.emit('warn', err_2);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    Metrics.prototype.getPayload = function () {
        this.closeBucket();
        var payload = this.getMetricsData();
        this.resetBucket();
        this.eventCount = 0;
        return payload;
    };
    Metrics.prototype.getMetricsData = function () {
        var reportFeatureTriggerEventReq = __assign(__assign({}, this.bucket.triggers), { events: this.eventMap2list(this.bucket.triggers.eventsMap) });
        delete reportFeatureTriggerEventReq.eventsMap;
        return reportFeatureTriggerEventReq;
    };
    Metrics.prototype.hasSameEvent = function (eventKey) {
        if (this.bucket.triggers.eventsMap.has(eventKey)) {
            var eventCount = this.bucket.triggers.eventsMap.get(eventKey) + 1;
            this.bucket.triggers.eventsMap.set(eventKey, eventCount);
            return true;
        }
        return false;
    };
    Metrics.prototype.createEventKey = function (feature, enabledResult, ctx, abTestId) {
        var eventKey = {
            featureName: feature.name || 'undefined',
            featureVersionId: "" + feature.id || '-1',
            featureValue: enabledResult.toggleValue ? constants.TRUE_STR : constants.FALSE_STR,
            abTestId: '-1',
            userId: '',
            datasetId: !enabledResult.datasetId ? '0' : "" + enabledResult.datasetId,
            versionId: !enabledResult.versionId ? '0' : "" + enabledResult.versionId,
        };
        if (ctx === null || ctx === void 0 ? void 0 : ctx.userId) {
            eventKey.userId = ctx.userId;
        }
        if (abTestId) {
            eventKey.abTestId = abTestId;
        }
        else {
            eventKey.abTestId = '-1';
        }
        return eventKey;
    };
    Metrics.prototype.stringifyEvent = function (event) {
        return event.featureName + "#" + event.featureVersionId + "#" + event.featureValue + "#" + event.abTestId + "\n        #" + event.userId + "#" + event.datasetId + "#" + event.versionId;
    };
    Metrics.prototype.parseEventString = function (key) {
        var event = key.split('#');
        var eventKey = {
            featureName: event[0],
            featureVersionId: event[1],
            featureValue: event[2],
            abTestId: event[3],
            userId: event[4],
            datasetId: event[5],
            versionId: event[6],
        };
        return eventKey;
    };
    Metrics.prototype.eventMap2list = function (eventMap) {
        var _this = this;
        var events = [];
        var event;
        var object;
        eventMap.forEach(function (value, key) {
            object = _this.parseEventString(key);
            event = {
                sn: uuidv4_1.default(),
                featureName: object.featureName,
                featureVersionId: object.featureVersionId,
                featureValue: object.featureValue,
                abTestId: object.abTestId,
                userId: object.userId,
                qimei: '',
                datasetID: object.datasetId,
                versionID: object.versionId,
                eventCount: value,
            };
            events.push(event);
        });
        event = undefined;
        object = undefined;
        return events;
    };
    return Metrics;
}(events_1.EventEmitter));
exports.default = Metrics;
//# sourceMappingURL=metrics.js.map