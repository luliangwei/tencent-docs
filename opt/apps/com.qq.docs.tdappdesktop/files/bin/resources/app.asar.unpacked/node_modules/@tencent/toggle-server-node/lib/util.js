"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getHashPercentNumber = exports.getRandomPercentNumber = exports.getAdjustedShanghaiTime = exports.configureServerTimeDiff = exports.reportL5 = exports.getL5 = exports.unpackResponse = exports.packRequest = exports.ungzipData = exports.gzipData = exports.getCommonHeaders = exports.getSdkVersion = exports.getIpAddress = exports.dateFormat = void 0;
var moment = require("moment");
var node_gzip_1 = require("node-gzip");
var uuidv4_1 = require("uuidv4");
var os = require("os");
var TafStream = require("@tencent/taf-stream");
var murmurHash3 = require("murmurhash3js");
var polaris_1 = require("@tencent/polaris");
var dtoJce_1 = require("./dtoJce");
var VERSION = '2.8.9';
var consumer = new polaris_1.Consumer();
var UNIPACKET_KEY_DETAIL = 'detail';
var SHANGHAI_TIME_OFFSET = 480;
function dateFormat(date) {
    var month = String(date.getMonth() + 1);
    month = month.length < 2 ? "0" + month : month;
    var day = String(date.getDate());
    day = day.length < 2 ? "0" + day : day;
    var hour = String(date.getHours());
    hour = hour.length < 2 ? "0" + hour : hour;
    var minutes = String(date.getMinutes());
    minutes = minutes.length < 2 ? "0" + minutes : minutes;
    var seconds = String(date.getSeconds());
    seconds = seconds.length < 2 ? "0" + seconds : seconds;
    return date.getFullYear() + "-" + month + "-" + day + " " + hour + ":" + minutes + ":" + seconds;
}
exports.dateFormat = dateFormat;
function getIpAddress() {
    var interfaces = os.networkInterfaces();
    for (var devName in interfaces) {
        var iface = interfaces[devName];
        for (var _i = 0, iface_1 = iface; _i < iface_1.length; _i++) {
            var alias = iface_1[_i];
            if (alias.family === 'IPv4' && alias.address !== '127.0.0.1' && !alias.internal) {
                return alias.address;
            }
        }
    }
}
exports.getIpAddress = getIpAddress;
function getSdkVersion() {
    return VERSION;
}
exports.getSdkVersion = getSdkVersion;
function getCommonHeaders(productEn) {
    return {
        sn: uuidv4_1.default(),
        productNameEn: productEn,
        sdkType: 'node',
        sdkVersion: VERSION,
        jceVersion: dtoJce_1.dto.jceProtocolVersion,
    };
}
exports.getCommonHeaders = getCommonHeaders;
function gzipData(buf) {
    return node_gzip_1.gzip(buf);
}
exports.gzipData = gzipData;
function ungzipData(buf) {
    return node_gzip_1.ungzip(buf);
}
exports.ungzipData = ungzipData;
function packRequest(inObj) {
    var wupEncode = new TafStream.Wup();
    wupEncode.writeStruct(UNIPACKET_KEY_DETAIL, inObj);
    var binBuffer = wupEncode.encode();
    return node_gzip_1.gzip(binBuffer.toNodeBuffer());
}
exports.packRequest = packRequest;
function unpackResponse(body, constructor) {
    return __awaiter(this, void 0, void 0, function () {
        var unzippedBuf, wupDecode;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, ungzipData(body)];
                case 1:
                    unzippedBuf = _a.sent();
                    wupDecode = new TafStream.Wup();
                    wupDecode.decode(new TafStream.BinBuffer(unzippedBuf));
                    return [2 /*return*/, wupDecode.readStruct(UNIPACKET_KEY_DETAIL, constructor)];
            }
        });
    });
}
exports.unpackResponse = unpackResponse;
function getL5(modId, cmdId) {
    return new Promise(function (resolve, reject) {
        consumer
            .select({
            namespace: 'Production',
            service: modId + ":" + cmdId
        })
            .then(function (res) {
            if (res === null) {
                reject(new Error('get ip and port fails.'));
            }
            var instance = res.instance;
            resolve({
                ip: instance.host,
                port: instance.port
            });
        })
            .catch(reject);
    });
}
exports.getL5 = getL5;
function reportL5(l5Config, delay, ret) {
    try {
        l5Config.update({
            ret: ret,
            delay: delay,
        });
    }
    catch (e) { }
}
exports.reportL5 = reportL5;
var serverTimeDiff = 0;
function configureServerTimeDiff(serverTimestamp) {
    if (!serverTimestamp) {
        return;
    }
    var clientTimestamp = Math.floor(Date.now() / 1000);
    var diff = serverTimestamp - clientTimestamp;
    serverTimeDiff = diff;
}
exports.configureServerTimeDiff = configureServerTimeDiff;
function getAdjustedShanghaiTime() {
    // get server timestamp
    var adjustedTimestamp = moment().unix() + serverTimeDiff;
    // server timestamp to shanghai time
    return moment(adjustedTimestamp * 1000).utcOffset(SHANGHAI_TIME_OFFSET);
}
exports.getAdjustedShanghaiTime = getAdjustedShanghaiTime;
function getRandomPercentNumber() {
    return Math.floor(Math.random() * 100) + 1;
}
exports.getRandomPercentNumber = getRandomPercentNumber;
function getHashPercentNumber(id, normalizer) {
    if (normalizer === void 0) { normalizer = 100; }
    return (murmurHash3.x86.hash32(id) % normalizer) + 1;
}
exports.getHashPercentNumber = getHashPercentNumber;
//# sourceMappingURL=util.js.map