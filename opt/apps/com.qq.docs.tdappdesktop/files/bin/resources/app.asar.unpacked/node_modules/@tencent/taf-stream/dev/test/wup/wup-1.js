var TafStream = require("../../../");

//写入数据
var wup = new TafStream.UniAttribute();
wup.wupVersion = TafStream.Wup.WUP_NORMAL;

wup.writeBoolean("nameBoolean", true);
wup.writeInt8("nameInt8", 0x22);
wup.writeString("nameString", "ForWupStringTest");

var eNameBinBuffer = new TafStream.BinBuffer();
eNameBinBuffer.writeInt32(0x12345678);
wup.writeBytes("nameBinBuffer", eNameBinBuffer);

var eNameList = new TafStream.List(TafStream.List(TafStream.String));
console.log(eNameList._classname);

var eNameMap  = new TafStream.Map(TafStream.String, TafStream.String);
eNameMap.set("eNameMap1", "eNameMap1_value1");
eNameMap.set("eNameMap2", "eNameMap1_value2");
wup.writeMap("nameMap", eNameMap);

console.log("========================================================");

//解码数据
var binBuffer = wup.encode();

binBuffer.print();

var is        = new TafStream.UniAttribute();
is.wupVersion = TafStream.Wup.WUP_NORMAL;
is.decode(new TafStream.BinBuffer(binBuffer.toNodeBuffer()));

//读出数据
var nameBoolean = is.readBoolean("nameBoolean");
console.log("nameBoolean:", nameBoolean);

var nameInt8 = is.readInt8("nameInt8");
console.log("nameInt8:", nameInt8);

var nameString = is.readString("nameString");
console.log("nameString:", nameString);

var nameBinBuffer = is.readBytes("nameBinBuffer");
nameBinBuffer.print();

var nameMap = is.readMap("nameMap", TafStream.Map(TafStream.String, TafStream.String));
console.log("nameMap size:", nameMap.size());
console.log("nameMap :", nameMap.get("eNameMap1"));
console.log("nameMap :", nameMap.get("eNameMap2"));

