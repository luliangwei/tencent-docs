// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `StatF.jce'
// **********************************************************************

var Taf = require('../../../libjce.js');


var taf = taf || {};
module.exports.taf = taf;

taf.StatMicMsgHead = function() {
    this.masterName = "";
    this.slaveName = "";
    this.interfaceName = "";
    this.masterIp = "";
    this.slaveIp = "";
    this.slavePort = 0;
    this.returnValue = 0;
    this.slaveSetName = "";
    this.slaveSetArea = "";
    this.slaveSetID = "";
    this.tafVersion = "";
};
taf.StatMicMsgHead._write = function (os, tag, value) { os.writeStruct(tag, value); }
taf.StatMicMsgHead._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
taf.StatMicMsgHead._readFrom = function (is) {
    var tmp = new taf.StatMicMsgHead();
    tmp.masterName = is.readString(0, true, Taf.String);
    tmp.slaveName = is.readString(1, true, Taf.String);
    tmp.interfaceName = is.readString(2, true, Taf.String);
    tmp.masterIp = is.readString(3, true, Taf.String);
    tmp.slaveIp = is.readString(4, true, Taf.String);
    tmp.slavePort = is.readInt32(5, true, Taf.Int32);
    tmp.returnValue = is.readInt32(6, true, Taf.Int32);
    tmp.slaveSetName = is.readString(7, false, Taf.String);
    tmp.slaveSetArea = is.readString(8, false, Taf.String);
    tmp.slaveSetID = is.readString(9, false, Taf.String);
    tmp.tafVersion = is.readString(10, false, Taf.String);
    return tmp;
};
taf.StatMicMsgHead.prototype._writeTo = function (os) {
    os.writeString(0, this.masterName);
    os.writeString(1, this.slaveName);
    os.writeString(2, this.interfaceName);
    os.writeString(3, this.masterIp);
    os.writeString(4, this.slaveIp);
    os.writeInt32(5, this.slavePort);
    os.writeInt32(6, this.returnValue);
    os.writeString(7, this.slaveSetName);
    os.writeString(8, this.slaveSetArea);
    os.writeString(9, this.slaveSetID);
    os.writeString(10, this.tafVersion);
};
taf.StatMicMsgHead.prototype._equal = function (anItem) {
    return anItem.masterName === this.masterName
    && anItem.slaveName === this.slaveName
    && anItem.interfaceName === this.interfaceName
    && anItem.masterIp === this.masterIp
    && anItem.slaveIp === this.slaveIp
    && anItem.slavePort === this.slavePort
    && anItem.returnValue === this.returnValue
    && anItem.slaveSetName === this.slaveSetName
    && anItem.slaveSetArea === this.slaveSetArea
    && anItem.slaveSetID === this.slaveSetID
    && anItem.tafVersion === this.tafVersion;
}
taf.StatMicMsgHead.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}

taf.StatMicMsgBody = function() {
    this.count = 0;
    this.timeoutCount = 0;
    this.execCount = 0;
    this.intervalCount = new Taf.Map(Taf.Int32, Taf.Int32);
    this.totalRspTime = 0;
    this.maxRspTime = 0;
    this.minRspTime = 0;
    this.retValue = new Taf.Map(Taf.Int64, Taf.Int32);
    this.weightValue = 0;
    this.weightCount = 0;
};
taf.StatMicMsgBody._write = function (os, tag, value) { os.writeStruct(tag, value); }
taf.StatMicMsgBody._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
taf.StatMicMsgBody._readFrom = function (is) {
    var tmp = new taf.StatMicMsgBody();
    tmp.count = is.readInt32(0, true, Taf.Int32);
    tmp.timeoutCount = is.readInt32(1, true, Taf.Int32);
    tmp.execCount = is.readInt32(2, true, Taf.Int32);
    tmp.intervalCount = is.readMap(3, true, Taf.Map(Taf.Int32, Taf.Int32));
    tmp.totalRspTime = is.readInt64(4, true, Taf.Int64);
    tmp.maxRspTime = is.readInt32(5, true, Taf.Int32);
    tmp.minRspTime = is.readInt32(6, true, Taf.Int32);
    tmp.retValue = is.readMap(7, false, Taf.Map(Taf.Int64, Taf.Int32));
    tmp.weightValue = is.readInt32(8, false, Taf.Int32);
    tmp.weightCount = is.readInt32(9, false, Taf.Int32);
    return tmp;
};
taf.StatMicMsgBody.prototype._writeTo = function (os) {
    os.writeInt32(0, this.count);
    os.writeInt32(1, this.timeoutCount);
    os.writeInt32(2, this.execCount);
    os.writeMap(3, this.intervalCount);
    os.writeInt64(4, this.totalRspTime);
    os.writeInt32(5, this.maxRspTime);
    os.writeInt32(6, this.minRspTime);
    os.writeMap(7, this.retValue);
    os.writeInt32(8, this.weightValue);
    os.writeInt32(9, this.weightCount);
};
taf.StatMicMsgBody.prototype.__equal__ = function (anItem) {
    return anItem.count === this.count
    && anItem.timeoutCount === this.timeoutCount
    && anItem.execCount === this.execCount
    && anItem.intervalCount === this.intervalCount
    && anItem.totalRspTime === this.totalRspTime
    && anItem.maxRspTime === this.maxRspTime
    && anItem.minRspTime === this.minRspTime
    && anItem.retValue === this.retValue
    && anItem.weightValue === this.weightValue
    && anItem.weightCount === this.weightCount;
}
taf.StatMicMsgBody.prototype.toString = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}

taf.StatSampleMsg = function() {
    this.unid = "";
    this.masterName = "";
    this.slaveName = "";
    this.interfaceName = "";
    this.masterIp = "";
    this.slaveIp = "";
    this.depth = 0;
    this.width = 0;
    this.parentWidth = 0;
};
taf.StatSampleMsg._write = function (os, tag, value) { os.writeStruct(tag, value); }
taf.StatSampleMsg._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
taf.StatSampleMsg._readFrom = function (is) {
    var tmp = new taf.StatSampleMsg();
    tmp.unid = is.readString(0, true, Taf.String);
    tmp.masterName = is.readString(1, true, Taf.String);
    tmp.slaveName = is.readString(2, true, Taf.String);
    tmp.interfaceName = is.readString(3, true, Taf.String);
    tmp.masterIp = is.readString(4, true, Taf.String);
    tmp.slaveIp = is.readString(5, true, Taf.String);
    tmp.depth = is.readInt32(6, true, Taf.Int32);
    tmp.width = is.readInt32(7, true, Taf.Int32);
    tmp.parentWidth = is.readInt32(8, true, Taf.Int32);
    return tmp;
};
taf.StatSampleMsg.prototype._writeTo = function (os) {
    os.writeString(0, this.unid);
    os.writeString(1, this.masterName);
    os.writeString(2, this.slaveName);
    os.writeString(3, this.interfaceName);
    os.writeString(4, this.masterIp);
    os.writeString(5, this.slaveIp);
    os.writeInt32(6, this.depth);
    os.writeInt32(7, this.width);
    os.writeInt32(8, this.parentWidth);
};
taf.StatSampleMsg.prototype._equal = function (anItem) {
    return anItem.unid === this.unid
    && anItem.masterName === this.masterName
    && anItem.slaveName === this.slaveName
    && anItem.interfaceName === this.interfaceName
    && anItem.masterIp === this.masterIp
    && anItem.slaveIp === this.slaveIp
    && anItem.depth === this.depth
    && anItem.width === this.width
    && anItem.parentWidth === this.parentWidth;
}
taf.StatSampleMsg.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}

taf.ProxyInfo = function() {
    this.bFromClient = true;
};
taf.ProxyInfo._write = function (os, tag, value) { os.writeStruct(tag, value); }
taf.ProxyInfo._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
taf.ProxyInfo._readFrom = function (is) {
    var tmp = new taf.ProxyInfo();
    tmp.bFromClient = is.readBoolean(0, true, Taf.Boolean);
    return tmp;
};
taf.ProxyInfo.prototype._writeTo = function (os) {
    os.writeBoolean(0, this.bFromClient);
};
taf.ProxyInfo.prototype.__equal__ = function (anItem) {
    return anItem.bFromClient === this.bFromClient;
}
taf.ProxyInfo.prototype.toString = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}



