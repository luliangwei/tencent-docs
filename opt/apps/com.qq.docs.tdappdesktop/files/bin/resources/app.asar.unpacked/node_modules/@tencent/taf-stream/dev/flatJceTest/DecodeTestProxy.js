"use strict";

var assert    = require("assert");
var TafStream = require("../../libjce");

var DecodeTest = DecodeTest || {};
module.exports.DecodeTest = DecodeTest;


DecodeTest.TestStruct = function() {
    this.int1 = 0;
    this.int2 = 0;
    this.str1 = "";
    this.str2 = "";
    this.str3 = "";
    this.str4 = "";
    this.str5 = "";
    this.str6 = "";
    this.str7 = "";
    this.str8 = "";
    this.str9 = "";
    this.str10 = "";
    this._classname = "DecodeTest.TestStruct";
};
DecodeTest.TestStruct._classname = "DecodeTest.TestStruct";
DecodeTest.TestStruct._write = function (os, tag, value) { os.writeStruct(tag, value); }
DecodeTest.TestStruct._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
DecodeTest.TestStruct._readFrom = function (is) {
    var tmp = new DecodeTest.TestStruct();
    tmp.int1 = is.readInt32(0, false, 0);
    tmp.int2 = is.readInt32(1, false, 0);
    tmp.str1 = is.readString(2, false, "");
    tmp.str2 = is.readString(3, false, "");
    tmp.str3 = is.readString(4, false, "");
    tmp.str4 = is.readString(5, false, "");
    tmp.str5 = is.readString(6, false, "");
    tmp.str6 = is.readString(7, false, "");
    tmp.str7 = is.readString(8, false, "");
    tmp.str8 = is.readString(9, false, "");
    tmp.str9 = is.readString(10, false, "");
    tmp.str10 = is.readString(11, false, "");
    return tmp;
};
DecodeTest.TestStruct.prototype._writeTo = function (os) {
    os.writeInt32(0, this.int1);
    os.writeInt32(1, this.int2);
    os.writeString(2, this.str1);
    os.writeString(3, this.str2);
    os.writeString(4, this.str3);
    os.writeString(5, this.str4);
    os.writeString(6, this.str5);
    os.writeString(7, this.str6);
    os.writeString(8, this.str7);
    os.writeString(9, this.str8);
    os.writeString(10, this.str9);
    os.writeString(11, this.str10);
};
DecodeTest.TestStruct.prototype._equal = function () {
    assert.fail("this structure not define key operation");
}
DecodeTest.TestStruct.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
}
DecodeTest.TestStruct.prototype.toObject = function() {
    return {
        "int1" : this.int1,
        "int2" : this.int2,
        "str1" : this.str1,
        "str2" : this.str2,
        "str3" : this.str3,
        "str4" : this.str4,
        "str5" : this.str5,
        "str6" : this.str6,
        "str7" : this.str7,
        "str8" : this.str8,
        "str9" : this.str9,
        "str10" : this.str10
    };
}
DecodeTest.TestStruct.prototype.readFromObject = function(json) {
    json.hasOwnProperty("int1") && (this.int1 = json.int1);
    json.hasOwnProperty("int2") && (this.int2 = json.int2);
    json.hasOwnProperty("str1") && (this.str1 = json.str1);
    json.hasOwnProperty("str2") && (this.str2 = json.str2);
    json.hasOwnProperty("str3") && (this.str3 = json.str3);
    json.hasOwnProperty("str4") && (this.str4 = json.str4);
    json.hasOwnProperty("str5") && (this.str5 = json.str5);
    json.hasOwnProperty("str6") && (this.str6 = json.str6);
    json.hasOwnProperty("str7") && (this.str7 = json.str7);
    json.hasOwnProperty("str8") && (this.str8 = json.str8);
    json.hasOwnProperty("str9") && (this.str9 = json.str9);
    json.hasOwnProperty("str10") && (this.str10 = json.str10);
}
DecodeTest.TestStruct.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
DecodeTest.TestStruct.new = function () {
    return new DecodeTest.TestStruct();
}
DecodeTest.TestStruct.create = function (is) {
    return DecodeTest.TestStruct._readFrom(is);
}







DecodeTest.FlatTestStruct = function(inputStream) {
    this._inputStream = inputStream;
    this._tagPosMap = {_max:0};

    this._originPosition = 0; // struct开始的位置，struct head结束后的位置
    this._unreadPropNum = 12; //未读属性个数
    this._int1 = undefined;
    this._int2 = undefined;
    this._str1 = undefined;
    this._str2 = undefined;
    this._str3 = undefined;
    this._str4 = undefined;
    this._str5 = undefined;
    this._str6 = undefined;
    this._str7 = undefined;
    this._str8 = undefined;
    this._str9 = undefined;
    this._str10 = undefined;
    this._classname = "DecodeTest.FlatTestStruct";
};

//提供position设置与还原的功能
DecodeTest.FlatTestStruct.prototype.KeepPosition = function (readFn, tag) {
    var currentPosition = this._inputStream._binBuffer._position;
    //this._inputStream._binBuffer._position = this._originPosition;
    this._inputStream._tagPosMap = this._tagPosMap;
    this._inputStream._binBuffer._position = this._tagPosMap[tag] || this._tagPosMap._max || this._originPosition;
    readFn();
    this._tagPosMap._max = Math.max(this._inputStream._binBuffer._position, this._tagPosMap._max);
    this._inputStream._tagPos = undefined;
    this._inputStream._binBuffer._position = currentPosition;
    this._unreadPropNum --;
    if(this._unreadPropNum == 0 ){
        //TODO:换成=undefined试试耗时
        //TODO:缓存tag位置试试 慢5%左右可以接受
        //delete this._inputStream;
        //delete this._originPosition;
        //delete this._unreadPropNum;
        //console.log("=== all ===")
        this._inputStream = undefined;
        this._originPosition = undefined;
        this._unreadPropNum = undefined;
        this._tagPosMap = undefined;
    }
}
//属性赋值：1.回退position至struct start 2.读取value 3.还原position
DecodeTest.FlatTestStruct.prototype.__defineGetter__("int1", function () {
    if(this._int1 == undefined){
        if(this._inputStream == undefined){
            return 0;
        }
        this.KeepPosition(function(){
            this._int1 = this._inputStream.readInt32(0, false, 0);
        }.bind(this), 0);
    }
    return this._int1;
});
DecodeTest.FlatTestStruct.prototype.__defineSetter__("int1", function (value) {
    this._int1 = value;
});

DecodeTest.FlatTestStruct.prototype.__defineGetter__("int2", function () {
    if(this._int2 == undefined){
        if(this._inputStream == undefined){
            return 0;
        }
        this.KeepPosition(function(){
            this._int2 = this._inputStream.readInt32(1, false, 0);
        }.bind(this), 1);
    }
    return this._int2;
});
DecodeTest.FlatTestStruct.prototype.__defineSetter__("int2", function (value) {
    this._int2 = value;
});

DecodeTest.FlatTestStruct.prototype.__defineGetter__("str1", function () {
    if(this._str1 == undefined){
        if(this._inputStream == undefined){
            return "";
        }
        this.KeepPosition(function(){
            this._str1 = this._inputStream.readString(2, false, "");
        }.bind(this), 2);
    }
    return this._str1;
});
DecodeTest.FlatTestStruct.prototype.__defineSetter__("str1", function (value) {
    this._str1 = value;
});

DecodeTest.FlatTestStruct.prototype.__defineGetter__("str2", function () {
    if(this._str2 == undefined){
        if(this._inputStream == undefined){
            return "";
        }
        this.KeepPosition(function(){
            this._str2 = this._inputStream.readString(3, false, "");
        }.bind(this), 3);
    }
    return this._str2;
});
DecodeTest.FlatTestStruct.prototype.__defineSetter__("str2", function (value) {
    this._str2 = value;
});

DecodeTest.FlatTestStruct.prototype.__defineGetter__("str3", function () {
    if(this._str3 == undefined){
        if(this._inputStream == undefined){
            return "";
        }
        this.KeepPosition(function(){
            this._str3 = this._inputStream.readString(4, false, "");
        }.bind(this), 4);
    }
    return this._str3;
});
DecodeTest.FlatTestStruct.prototype.__defineSetter__("str3", function (value) {
    this._str3 = value;
});

DecodeTest.FlatTestStruct.prototype.__defineGetter__("str4", function () {
    if(this._str4 == undefined){
        if(this._inputStream == undefined){
            return "";
        }
        this.KeepPosition(function(){
            this._str4 = this._inputStream.readString(5, false, "");
        }.bind(this), 5);
    }
    return this._str4;
});
DecodeTest.FlatTestStruct.prototype.__defineSetter__("str4", function (value) {
    this._str4 = value;
});

DecodeTest.FlatTestStruct.prototype.__defineGetter__("str5", function () {
    if(this._str5 == undefined){
        if(this._inputStream == undefined){
            return "";
        }
        this.KeepPosition(function(){
            this._str5 = this._inputStream.readString(6, false, "");
        }.bind(this), 6);
    }
    return this._str5;
});
DecodeTest.FlatTestStruct.prototype.__defineSetter__("str5", function (value) {
    this._str5 = value;
});

DecodeTest.FlatTestStruct.prototype.__defineGetter__("str6", function () {
    if(this._str6 == undefined){
        if(this._inputStream == undefined){
            return "";
        }
        this.KeepPosition(function(){
            this._str6 = this._inputStream.readString(7, false, "");
        }.bind(this), 7);
    }
    return this._str6;
});
DecodeTest.FlatTestStruct.prototype.__defineSetter__("str6", function (value) {
    this._str6 = value;
});

DecodeTest.FlatTestStruct.prototype.__defineGetter__("str7", function () {
    if(this._str7 == undefined){
        if(this._inputStream == undefined){
            return "";
        }
        this.KeepPosition(function(){
            this._str7 = this._inputStream.readString(8, false, "");
        }.bind(this), 8);
    }
    return this._str7;
});
DecodeTest.FlatTestStruct.prototype.__defineSetter__("str7", function (value) {
    this._str7 = value;
});

DecodeTest.FlatTestStruct.prototype.__defineGetter__("str8", function () {
    if(this._str8 == undefined){
        if(this._inputStream == undefined){
            return "";
        }
        this.KeepPosition(function(){
            this._str8 = this._inputStream.readString(9, false, "");
        }.bind(this), 9);
    }
    return this._str8;
});
DecodeTest.FlatTestStruct.prototype.__defineSetter__("str8", function (value) {
    this._str8 = value;
});

DecodeTest.FlatTestStruct.prototype.__defineGetter__("str9", function () {
    if(this._str9 == undefined){
        if(this._inputStream == undefined){
            return "";
        }
        this.KeepPosition(function(){
            this._str9 = this._inputStream.readString(10, false, "");
        }.bind(this), 10);
    }
    return this._str9;
});
DecodeTest.FlatTestStruct.prototype.__defineSetter__("str9", function (value) {
    this._str9 = value;
});

DecodeTest.FlatTestStruct.prototype.__defineGetter__("str10", function () {
    if(this._str10 == undefined){
        if(this._inputStream == undefined){
            return "";
        }
        this.KeepPosition(function(){
            this._str10 = this._inputStream.readString(11, false, "");
        }.bind(this), 11);
    }
    return this._str10;
});
DecodeTest.FlatTestStruct.prototype.__defineSetter__("str10", function (value) {
    this._str10 = value;
});


DecodeTest.FlatTestStruct._classname = "DecodeTest.FlatTestStruct";
DecodeTest.FlatTestStruct._write = function (os, tag, value) { os.writeStruct(tag, value); }
DecodeTest.FlatTestStruct._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
DecodeTest.FlatTestStruct._readFrom = function (is) {
    var tmp = new DecodeTest.FlatTestStruct(is);
    tmp._originPosition = is._binBuffer._position;
    return tmp;
};
DecodeTest.FlatTestStruct.prototype._writeTo = function (os) {
    os.writeInt32(0, this.int1);
    os.writeInt32(1, this.int2);
    os.writeString(2, this.str1);
    os.writeString(3, this.str2);
    os.writeString(4, this.str3);
    os.writeString(5, this.str4);
    os.writeString(6, this.str5);
    os.writeString(7, this.str6);
    os.writeString(8, this.str7);
    os.writeString(9, this.str8);
    os.writeString(10, this.str9);
    os.writeString(11, this.str10);
};
DecodeTest.FlatTestStruct.prototype._equal = function () {
    assert.fail("this structure not define key operation");
}
DecodeTest.FlatTestStruct.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
}
DecodeTest.FlatTestStruct.prototype.toObject = function() {
    return {
        "int1" : this.int1,
        "int2" : this.int2,
        "str1" : this.str1,
        "str2" : this.str2,
        "str3" : this.str3,
        "str4" : this.str4,
        "str5" : this.str5,
        "str6" : this.str6,
        "str7" : this.str7,
        "str8" : this.str8,
        "str9" : this.str9,
        "str10" : this.str10
    };
}
DecodeTest.FlatTestStruct.prototype.readFromObject = function(json) {
    json.hasOwnProperty("int1") && (this.int1 = json.int1);
    json.hasOwnProperty("int2") && (this.int2 = json.int2);
    json.hasOwnProperty("str1") && (this.str1 = json.str1);
    json.hasOwnProperty("str2") && (this.str2 = json.str2);
    json.hasOwnProperty("str3") && (this.str3 = json.str3);
    json.hasOwnProperty("str4") && (this.str4 = json.str4);
    json.hasOwnProperty("str5") && (this.str5 = json.str5);
    json.hasOwnProperty("str6") && (this.str6 = json.str6);
    json.hasOwnProperty("str7") && (this.str7 = json.str7);
    json.hasOwnProperty("str8") && (this.str8 = json.str8);
    json.hasOwnProperty("str9") && (this.str9 = json.str9);
    json.hasOwnProperty("str10") && (this.str10 = json.str10);
}
DecodeTest.FlatTestStruct.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
DecodeTest.FlatTestStruct.new = function () {
    return new DecodeTest.FlatTestStruct();
}
DecodeTest.FlatTestStruct.create = function (is) {
    return DecodeTest.FlatTestStruct._readFrom(is);
}