"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var client_1 = require("./client");
var metrics_1 = require("./metrics");
var events_1 = require("events");
var os_1 = require("os");
var repository_1 = require("./repository");
var strategy_1 = require("./strategy");
var constants = require("./constants");
var BACKUP_PATH = os_1.tmpdir();
var ACCESS_DOMAIN_FORMAL = 'https://access.toggle.qq.com';
var ACCESS_CONFIG_L5_MOD_ID_FORMAL = 64842433;
var ACCESS_CONFIG_L5_CMD_ID_FORMAL = 65540;
var STATS_DOMAIN_FORMAL = 'https://event.toggle.qq.com';
var STATS_L5_MOD_ID_FORMAL = 64939713;
var STATS_L5_CMD_ID_FORMAL = 65537;
var ACCESS_DOMAIN_DEV = 'http://toggleaccesspre.sparta.html5.qq.com';
var ACCESS_CONFIG_L5_MOD_ID_DEV = 64842433;
var ACCESS_CONFIG_L5_CMD_ID_DEV = 65536;
var STATS_DOMAIN_DEV = 'http://dev.toggle-stat.sparta.html5.qq.com';
var STATS_L5_MOD_ID_DEV = 64939713;
var STATS_L5_CMD_ID_DEV = 65536;
var AB_TEST_ID_UNDEFINED = '-1';
var VERSION_REG = /([0-9]+\.)?([0-9]+\.)?[0-9]+/;
var Toggle = /** @class */ (function (_super) {
    __extends(Toggle, _super);
    function Toggle(_a) {
        var env = _a.env, productEn = _a.productEn, productId = _a.productId, moduleId = _a.moduleId, version = _a.version, buildId = _a.buildId, _b = _a.refreshInterval, refreshInterval = _b === void 0 ? 120 * 1000 : _b, _c = _a.metricsInterval, metricsInterval = _c === void 0 ? 120 * 1000 : _c, _d = _a.disableMetrics, disableMetrics = _d === void 0 ? false : _d, _e = _a.backupPath, backupPath = _e === void 0 ? BACKUP_PATH : _e, _f = _a.strategies, strategies = _f === void 0 ? [] : _f, _g = _a.timeout, timeout = _g === void 0 ? 10 * 1000 : _g, _h = _a.useL5, useL5 = _h === void 0 ? false : _h;
        var _this = _super.call(this) || this;
        if (!productEn) {
            throw new Error('Toggle productEn is missing');
        }
        if (!productId) {
            throw new Error('Toggle productId is missing');
        }
        if (!moduleId) {
            throw new Error('Toggle moduleId is missing');
        }
        var versions = '';
        try {
            versions = Toggle.getVersion(version);
        }
        catch (error) {
            throw error;
        }
        var accessDomain = env === 'dev' ? ACCESS_DOMAIN_DEV : ACCESS_DOMAIN_FORMAL;
        var accessConfigModId = env === 'dev' ? ACCESS_CONFIG_L5_MOD_ID_DEV : ACCESS_CONFIG_L5_MOD_ID_FORMAL;
        var accessConfigCmdId = env === 'dev' ? ACCESS_CONFIG_L5_CMD_ID_DEV : ACCESS_CONFIG_L5_CMD_ID_FORMAL;
        var statsDomain = env === 'dev' ? STATS_DOMAIN_DEV : STATS_DOMAIN_FORMAL;
        var statsConfigModId = env === 'dev' ? STATS_L5_MOD_ID_DEV : STATS_L5_MOD_ID_FORMAL;
        var statsConfigCmdId = env === 'dev' ? STATS_L5_CMD_ID_DEV : STATS_L5_CMD_ID_FORMAL;
        var combinedVersion = buildId ? versions + "." + buildId : versions;
        _this.repository = new repository_1.default({
            productEn: productEn,
            productId: productId,
            moduleId: moduleId,
            version: combinedVersion,
            accessDomain: accessDomain,
            backupPath: backupPath,
            refreshInterval: refreshInterval < 10000 ? 10000 : refreshInterval,
            timeout: timeout,
            useL5: useL5,
            configL5ModId: accessConfigModId,
            configL5CmdId: accessConfigCmdId,
        });
        strategies = strategy_1.defaultStrategies.concat(strategies);
        _this.metrics = new metrics_1.default({
            productEn: productEn,
            productId: productId,
            moduleId: moduleId,
            version: combinedVersion,
            statsDomain: statsDomain,
            disableMetrics: disableMetrics,
            metricsInterval: metricsInterval < 10000 ? 10000 : metricsInterval,
            timeout: timeout,
            useL5: useL5,
            configL5ModId: statsConfigModId,
            configL5CmdId: statsConfigCmdId,
        });
        _this.repository.once('ready', function () {
            _this.client = new client_1.default(_this.repository, _this.metrics, strategies);
            _this.client.on('error', function (err) { return _this.emit('error', err); });
            _this.client.on('warn', function (err) { return _this.emit('warn', err); });
            _this.emit('ready');
        });
        _this.repository.on('error', function (err) {
            err.message = "Repository error: " + err.message;
            _this.emit('error', err);
        });
        _this.repository.on('warn', function (err) {
            err.message = "Repository warn: " + err.message;
            _this.emit('warn', err);
        });
        // 增量更新，返回变动的开关信息
        _this.repository.on('change', function (payload) { return _this.emit('change', payload); });
        // 当开关下拉成功时触发，payload为当前产品对应的所有开关信息
        _this.repository.on('data', function (payload) { return _this.emit('data', payload); });
        // 当开关被触发（isEnabled）时触发，payload为触发事件
        _this.metrics.on('trigger', function (payload) {
            _this.emit('trigger', payload);
        });
        // 当上报当前所有开关触发事件时触发，payload为所有触发事件，若上报时没有任何触发事件，不会触发此事件
        _this.metrics.on('sent', function (payload) {
            _this.emit('sent', payload);
        });
        _this.metrics.on('error', function (err) {
            err.message = "Metrics error: " + err.message;
            _this.emit('error', err);
        });
        _this.metrics.on('warn', function (err) {
            err.message = "Metrics warn: " + err.message;
            _this.emit('warn', err);
        });
        return _this;
    }
    Toggle.getVersion = function (version) {
        var versions = version.match(VERSION_REG);
        if (!versions || versions.length === 0) {
            throw new Error('Toggle version is missing');
        }
        return versions[0];
    };
    Toggle.prototype.destroy = function () {
        this.repository.stop();
        this.metrics.stop();
        this.client = undefined;
    };
    Toggle.prototype.getFeatureToggleDefinition = function (toggleName) {
        return this.repository.getToggle(toggleName);
    };
    Toggle.prototype.getFeatureToggleDefinitions = function () {
        return this.repository.getToggles();
    };
    // 直接把Tab Node SDK的getGrayPolicyInfo函数得到的结果作为入参传入
    Toggle.prototype.activateExperiment = function (guid, appId, expData) {
        this.repository.activateExperiment(guid, appId, expData);
    };
    Toggle.prototype.reportTabMetricsData = function (tabReportData) {
        if (!tabReportData) {
            this.emit('error', Error('tabReportData undefined'));
            return;
        }
        // 设置guid和appid,优先使用tabReportData中的信息
        var tabMetaData = this.repository.getTabMetaData();
        if (!tabReportData.guid) {
            tabReportData.guid = tabMetaData.guid;
        }
        if (!tabReportData.appId) {
            tabReportData.appId = tabMetaData.appId;
        }
        var expInfo = this.repository.getExpInfoByExpId(tabReportData.expId);
        if (!expInfo) {
            if (!!tabReportData.featureName) {
                expInfo = {
                    params: {},
                };
                // 未使用activeExperiment,但传入了featureName
                expInfo.params[constants.TabToggleNameField] = tabReportData.featureName;
                expInfo[constants.TabPercentage] = tabReportData.featurePercentage;
                expInfo[constants.TabExperimentCode] = tabReportData.experimentCode;
            }
            else {
                this.emit('error', Error('feature name of exp is empty'));
                return;
            }
        }
        if (!expInfo.params || !expInfo.params[constants.TabToggleNameField]) {
            this.emit('error', Error("params of exp has no attribute named " + constants.TabToggleNameField));
            return;
        }
        var feature = this.repository.getToggle(expInfo.params[constants.TabToggleNameField]);
        this.metrics.reportTabMetricsData(feature, tabReportData, expInfo);
    };
    Toggle.prototype.isEnabled = function (name, context, fallbackValue, abTestInfo) {
        var result = this.getEnabledResult(name, context || {}, fallbackValue, abTestInfo, constants.WithoutDataset);
        return result.toggleValue;
    };
    Toggle.prototype.isEnabledWithDataset = function (name, context, fallbackValue, abTestInfo) {
        var result = this.getEnabledResult(name, context || {}, fallbackValue, abTestInfo, constants.WithDataset);
        return { toggleValue: result.toggleValue, value: result.dataset };
    };
    Toggle.prototype.isEnabledWithStringData = function (name, context, fallbackValue, abTestInfo) {
        var result = this.getEnabledResult(name, context || {}, fallbackValue, abTestInfo, constants.WithDataset);
        if (result.type !== constants.DataTypeString) {
            this.emit('warn', "toggle " + name + ": expect string data, got " + result.type);
            return { toggleValue: result.toggleValue, value: '' };
        }
        return { toggleValue: result.toggleValue, value: result.value };
    };
    Toggle.prototype.isEnabledWithBooleanData = function (name, context, fallbackValue, abTestInfo) {
        var result = this.getEnabledResult(name, context || {}, fallbackValue, abTestInfo, constants.WithDataset);
        if (result.type !== constants.DataTypeBool) {
            this.emit('warn', "toggle " + name + ": expect bool data, got " + result.type);
            return { toggleValue: result.toggleValue, value: false };
        }
        return { toggleValue: result.toggleValue, value: result.value === 'true' };
    };
    Toggle.prototype.isEnabledWithNumberData = function (name, context, fallbackValue, abTestInfo) {
        var result = this.getEnabledResult(name, context || {}, fallbackValue, abTestInfo, constants.WithDataset);
        if (result.type !== constants.DataTypeInt && result.type !== constants.DataTypeFloat) {
            this.emit('warn', "toggle " + name + ": expect number data, got " + result.type);
            return { toggleValue: result.toggleValue, value: 0 };
        }
        return { toggleValue: result.toggleValue, value: Number(result.value) || 0 };
    };
    Toggle.prototype.isEnabledWithListData = function (name, context, fallbackValue, abTestInfo) {
        try {
            var result = this.getEnabledResult(name, context || {}, fallbackValue, abTestInfo, constants.WithDataset);
            if (result.type !== constants.DataTypeList) {
                this.emit('warn', "toggle " + name + ": expect string array data, got " + result.type);
                return { toggleValue: result.toggleValue, value: Array() };
            }
            var listStr = JSON.parse(result.value).filter(function (s) { return s; });
            return { toggleValue: result.toggleValue, value: listStr };
        }
        catch (error) {
            this.emit('warn', "toggle " + name + " get list data error, using default value: " + error);
            return { toggleValue: false, value: Array() };
        }
    };
    Toggle.prototype.isEnabledWithJsonData = function (name, context, fallbackValue, abTestInfo) {
        var result = this.getEnabledResult(name, context || {}, fallbackValue, abTestInfo, constants.WithDataset);
        if (result.type !== constants.DataTypeJSON) {
            this.emit('warn', "toggle " + name + ": expect json data, got " + result.type);
            return { toggleValue: result.toggleValue, value: '{}' };
        }
        return { toggleValue: result.toggleValue, value: result.value };
    };
    Toggle.prototype.getEnabledResult = function (name, context, fallbackValue, abTestInfo, hasDataset) {
        if (this.client === undefined) {
            var fallback = typeof fallbackValue === 'boolean' ? fallbackValue : false;
            this.emit('warn', "toggle has not been initialized yet. isEnabled(" + name + ") defaulted to " + fallback);
            // Save feature event on uninitialized isEnabled calls
            this.metrics.saveFeatureEvent({ name: name }, { toggleValue: !!fallback }, context, AB_TEST_ID_UNDEFINED);
            return { toggleValue: fallback };
        }
        return this.client.isEnabled(name, context || {}, fallbackValue, abTestInfo, hasDataset);
    };
    return Toggle;
}(events_1.EventEmitter));
exports.default = Toggle;
//# sourceMappingURL=toggle.js.map