// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var DecodeTest = DecodeTest || {};

/**
 * @constructor
 */
DecodeTest.TestStruct = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {DecodeTest.TestStruct}
 */
DecodeTest.TestStruct.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @param {flatbuffers.ByteBuffer} bb
 * @param {DecodeTest.TestStruct=} obj
 * @returns {DecodeTest.TestStruct}
 */
DecodeTest.TestStruct.getRootAsTestStruct = function(bb, obj) {
  return (obj || new DecodeTest.TestStruct).__init(bb.readInt32(bb.position()) + bb.position(), bb);
};

/**
 * @returns {number}
 */
DecodeTest.TestStruct.prototype.int1 = function() {
  var offset = this.bb.__offset(this.bb_pos, 4);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @returns {number}
 */
DecodeTest.TestStruct.prototype.int2 = function() {
  var offset = this.bb.__offset(this.bb_pos, 6);
  return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
DecodeTest.TestStruct.prototype.str1 = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 8);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Encoding=} optionalEncoding
 * @returns {string|Uint8Array|null}
 */
DecodeTest.TestStruct.prototype.str2 = function(optionalEncoding) {
  var offset = this.bb.__offset(this.bb_pos, 10);
  return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;
};

/**
 * @param {flatbuffers.Builder} builder
 */
DecodeTest.TestStruct.startTestStruct = function(builder) {
  builder.startObject(4);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} int1
 */
DecodeTest.TestStruct.addInt1 = function(builder, int1) {
  builder.addFieldInt32(0, int1, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} int2
 */
DecodeTest.TestStruct.addInt2 = function(builder, int2) {
  builder.addFieldInt32(1, int2, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} str1Offset
 */
DecodeTest.TestStruct.addStr1 = function(builder, str1Offset) {
  builder.addFieldOffset(2, str1Offset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {flatbuffers.Offset} str2Offset
 */
DecodeTest.TestStruct.addStr2 = function(builder, str2Offset) {
  builder.addFieldOffset(3, str2Offset, 0);
};

/**
 * @param {flatbuffers.Builder} builder
 * @returns {flatbuffers.Offset}
 */
DecodeTest.TestStruct.endTestStruct = function(builder) {
  var offset = builder.endObject();
  return offset;
};

// Exports for Node.js and RequireJS
this.DecodeTest = DecodeTest;
