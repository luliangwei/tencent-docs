// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `Ext.jce'
// **********************************************************************
var Taf = require('../../libjce');
var _TAF_MODULE_A_ = require('./ExtJce.js');

var Test = Test || {};
module.exports.Test = Test;

Test.StatMicMsgHead = function() {
    this.masterName = "";
    this.slaveName = "";
    this.interfaceName = "";
    this.masterIp = "";
    this.slaveIp = "";
    this.slavePort = 0;
    this.returnValue = 0;
    this.slaveSetName = "";
    this.slaveSetArea = "";
    this.slaveSetID = "";
    this.version = "";
};
Test.StatMicMsgHead._write = function (os, tag, value) { os.writeStruct(tag, value); }
Test.StatMicMsgHead._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Test.StatMicMsgHead._readFrom = function (is) {
    var tmp = new Test.StatMicMsgHead();
    tmp.masterName = is.readString(0, true, Taf.String);
    tmp.slaveName = is.readString(1, true, Taf.String);
    tmp.interfaceName = is.readString(2, true, Taf.String);
    tmp.masterIp = is.readString(3, true, Taf.String);
    tmp.slaveIp = is.readString(4, true, Taf.String);
    tmp.slavePort = is.readInt32(5, true, Taf.Int32);
    tmp.returnValue = is.readInt32(6, true, Taf.Int32);
    tmp.slaveSetName = is.readString(7, false, Taf.String);
    tmp.slaveSetArea = is.readString(8, false, Taf.String);
    tmp.slaveSetID = is.readString(9, false, Taf.String);
    tmp.version = is.readString(10, false, Taf.String);
    return tmp;
};
Test.StatMicMsgHead.prototype._writeTo = function (os) {
    os.writeString(0, this.masterName);
    os.writeString(1, this.slaveName);
    os.writeString(2, this.interfaceName);
    os.writeString(3, this.masterIp);
    os.writeString(4, this.slaveIp);
    os.writeInt32(5, this.slavePort);
    os.writeInt32(6, this.returnValue);
    os.writeString(7, this.slaveSetName);
    os.writeString(8, this.slaveSetArea);
    os.writeString(9, this.slaveSetID);
    os.writeString(10, this.version);
};
Test.StatMicMsgHead.prototype._equal = function (anItem) {
    return anItem.masterName === this.masterName
    && anItem.slaveName === this.slaveName
    && anItem.interfaceName === this.interfaceName
    && anItem.masterIp === this.masterIp
    && anItem.slaveIp === this.slaveIp
    && anItem.slavePort === this.slavePort
    && anItem.returnValue === this.returnValue
    && anItem.slaveSetName === this.slaveSetName
    && anItem.slaveSetArea === this.slaveSetArea
    && anItem.slaveSetID === this.slaveSetID
    && anItem.version === this.version;
}
Test.StatMicMsgHead.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Test.StatMicMsgHead.prototype.toBinBuffer = function () {
    var os = new Taf.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Test.StatMicMsgHead.create = function (is) {
    return Test.StatMicMsgHead._readFrom(is);
}
Test.StatMicMsgBody = function() {
    this.count = 0;
    this.timeoutCount = 0;
    this.execCount = 0;
    this.intervalCount = new Taf.Map(Taf.Int32, Taf.Int32);
    this.totalRspTime = 0;
    this.maxRspTime = 0;
    this.minRspTime = 0;
    this.extInfo = new _TAF_MODULE_A_.Ext.ExtInfo();
    this.weightValue = 0;
    this.weightCount = 0;
};
Test.StatMicMsgBody._write = function (os, tag, value) { os.writeStruct(tag, value); }
Test.StatMicMsgBody._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
Test.StatMicMsgBody._readFrom = function (is) {
    var tmp = new Test.StatMicMsgBody();
    tmp.count = is.readInt32(0, true, Taf.Int32);
    tmp.timeoutCount = is.readInt32(1, true, Taf.Int32);
    tmp.execCount = is.readInt32(2, true, Taf.Int32);
    tmp.intervalCount = is.readMap(3, true, Taf.Map(Taf.Int32, Taf.Int32));
    tmp.totalRspTime = is.readInt64(4, true, Taf.Int64);
    tmp.maxRspTime = is.readInt32(5, true, Taf.Int32);
    tmp.minRspTime = is.readInt32(6, true, Taf.Int32);
    tmp.extInfo = is.readStruct(7, false, _TAF_MODULE_A_.Ext.ExtInfo);
    tmp.weightValue = is.readInt32(8, false, Taf.Int32);
    tmp.weightCount = is.readInt32(9, false, Taf.Int32);
    return tmp;
};
Test.StatMicMsgBody.prototype._writeTo = function (os) {
    os.writeInt32(0, this.count);
    os.writeInt32(1, this.timeoutCount);
    os.writeInt32(2, this.execCount);
    os.writeMap(3, this.intervalCount);
    os.writeInt64(4, this.totalRspTime);
    os.writeInt32(5, this.maxRspTime);
    os.writeInt32(6, this.minRspTime);
    os.writeStruct(7, this.extInfo);
    os.writeInt32(8, this.weightValue);
    os.writeInt32(9, this.weightCount);
};
Test.StatMicMsgBody.prototype.__equal__ = function (anItem) {
    return anItem.count === this.count
    && anItem.timeoutCount === this.timeoutCount
    && anItem.execCount === this.execCount
    && anItem.intervalCount === this.intervalCount
    && anItem.totalRspTime === this.totalRspTime
    && anItem.maxRspTime === this.maxRspTime
    && anItem.minRspTime === this.minRspTime
    && anItem.extInfo === this.extInfo
    && anItem.weightValue === this.weightValue
    && anItem.weightCount === this.weightCount;
}
Test.StatMicMsgBody.prototype.toString = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
Test.StatMicMsgBody.prototype.toBinBuffer = function () {
    var os = new Taf.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
Test.StatMicMsgBody.create = function (is) {
    return Test.StatMicMsgBody._readFrom(is);
}


