"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const assert_1 = __importDefault(require("assert"));
const net_1 = __importDefault(require("net"));
const struct_1 = __importDefault(require("struct"));
const address_1 = __importDefault(require("address"));
const dgram_1 = __importDefault(require("dgram"));
class Atta {
    constructor() {
        this.socketType = Atta.M_ATTA_SOCKETTYPE_UDP;
        this.ip = Atta.ATTA_AGENT_UDP_HOST;
        this.port = Atta.ATTA_AGENT_UDP_PORT;
        this.ports = Atta.ATTA_AGENT_PORTS;
        this.unixPath = Atta.ATTA_AGENT_UNIX_PATH;
        this.localIp = '127.0.0.1';
        this.socketType = Atta.M_ATTA_SOCKETTYPE_UDP;
        this.ip = Atta.ATTA_AGENT_UDP_HOST;
        this.port = Atta.ATTA_AGENT_UDP_PORT;
        this.ports = Atta.ATTA_AGENT_PORTS;
        this.unixPath = Atta.ATTA_AGENT_UNIX_PATH;
        this.localIp = address_1.default.ip() || '127.0.0.1';
    }
    /**
     * 初始化UDP
     */
    async initProtocol(protocol, ip = '', port = 0) {
        assert_1.default(protocol && /^((ud|tc)p|unix)$/i.test(protocol), 'Protocol must one of `udp` `tcp` `unix`.');
        assert_1.default(!port || (port && ip), 'Must specify IP.');
        if (protocol === 'udp') {
            this.socketType = Atta.M_ATTA_SOCKETTYPE_UDP;
        }
        else if (protocol === 'tcp') {
            this.socketType = Atta.M_ATTA_SOCKETTYPE_TCP;
        }
        else {
            this.socketType = Atta.M_ATTA_SOCKETTYPE_UNIX;
            return;
        }
        this.ip = ip || this.ip;
        this.port = port || this.port;
        if (port) {
            this.ports = '';
        }
        else {
            const findPort = await this.findUsefulPort(this.ip, this.ports);
            this.port = findPort || this.port;
        }
    }
    async findUsefulPort(ip, ports) {
        // 准备请求
        const iValueLen = 0;
        const iResLen = 0;
        const iAttaIdLen = 0;
        const iPwdLen = 0;
        const iIpLen = 0;
        // uint32_t iTotalLen; //总长度
        const iTotalLen = 24;
        // uint8_t iVersion; //版本号，默认0x01
        const iVersion = Atta.ATTA_API_SIGN_V1;
        // uint8_t iSource;  //消息来源系统，如M_ATTA_SOURCE_AT
        const iSource = Atta.API_SOURCE_AT;
        // uint8_t cVersion; //Boss来源专用，默认0x10：0x10分隔符,0x20-URL的key value协议,0x40-json
        const cVersion = Atta.ATTA_API_SCHEMA_SIMPLE;
        // uint64_t lMsgTime; //消息生成时间
        const lMsgTime = Number(new Date());
        // 计算签名
        const iSignTime = Number(lMsgTime.toString().split('').reverse().join(''));
        const data = struct_1.default()
            .word32Ube('iTotalLen')
            .word8('iVersion')
            .word8('iSource')
            .word8('cVersion')
            .word64Ube('lMsgTime')
            .word16Ube('iResLen')
            .word8('iAttaIdLen')
            .word8('iPwdLen')
            .word8('iIpLen')
            .word32Ube('iValueLen');
        data.allocate();
        const sendBuffer = data.buffer();
        const proxy = data.fields;
        proxy.iTotalLen = iTotalLen;
        proxy.iVersion = iVersion;
        proxy.iSource = iSource;
        proxy.cVersion = cVersion;
        proxy.lMsgTime = lMsgTime;
        proxy.iResLen = iResLen;
        proxy.iAttaIdLen = iAttaIdLen;
        proxy.iPwdLen = iPwdLen;
        proxy.iIpLen = iIpLen;
        proxy.iValueLen = iValueLen;
        const portArray = ports.split(',');
        for (let i = 0; i < portArray.length; i++) {
            const iPort = Number(portArray[i]);
            try {
                const readed = await this.getConnect(ip, iPort, sendBuffer);
                const data = struct_1.default()
                    .word32Ube('iTotalLen')
                    .word8('iVersion')
                    .word64Ube('lMsgTime')
                    .word64Ube('iSignTime');
                data._setBuff(readed);
                if (data.fields.iTotalLen !== Atta.SR_MESSAGE_OFFSET || data.fields.lMsgTime !== lMsgTime || data.fields.iSignTime !== iSignTime) {
                    continue;
                }
                return iPort;
            }
            catch (e) {
                continue;
            }
        }
        return 0;
    }
    async getConnect(ip, port, sendBuffer) {
        return new Promise((resolve, reject) => {
            const client = new net_1.default.Socket();
            client.connect(port, ip, () => {
                client.on('data', (data) => {
                    const readed = data.slice(0, Atta.SR_MESSAGE_OFFSET);
                    if (readed.length !== Atta.SR_MESSAGE_OFFSET) {
                        client.destroy();
                        const err = new Error(`The data returned by the server does not meet the length requirement.`);
                        return reject(err);
                    }
                    client.end();
                    resolve(readed);
                });
                client.write(sendBuffer);
            });
            client.on('error', (err) => {
                client.destroy();
                reject(err);
            });
        });
    }
    async send_string(attaId, token, str) {
        const dataLen = str.length;
        if (dataLen === 0) {
            return Atta.M_ATTA_REPORT_CODE_INVALID_MSG;
        }
        const sendData = Buffer.from(str);
        return this.send_binary(attaId, token, sendData);
    }
    // eslint-disable-next-line max-params
    async send_fields(attaId, token, fields, autoEscape = false) {
        const separator = '|';
        let str = '';
        for (let i = 0; i < fields.length; i++) {
            const fieldValue = fields[i];
            if (autoEscape) {
                const fmtField = this.escape_string(fieldValue);
                str += fmtField;
            }
            else {
                str += fieldValue;
            }
            str += separator;
        }
        const sendStr = str.substr(0, str.length - 1);
        return this.send_string(attaId, token, sendStr);
    }
    async send_binary(sAttaId, sToken, data) {
        const len = data.length;
        if (len <= 0) {
            return Atta.M_ATTA_REPORT_CODE_INVALID_MSG;
        }
        if (len >= Atta.MAX_ATTAMSG_LEN) {
            return Atta.M_ATTA_REPORT_CODE_OVER_LIMIT;
        }
        const strToken = sToken.length === 0 ? '0' : sToken;
        const sLocalIp = this.localIp;
        // 构造Agent协议消息
        const BODY_OFFSET = 24;
        // uint8_t iVersion;   //版本号，默认0x01
        const iVersion = Atta.ATTA_API_VER_V1;
        // uint8_t iSource;    //消息来源系统，如M_ATTA_SOURCE_AT
        const iSource = Atta.API_SOURCE_AT;
        // uint8_t cVersion;   //Boss来源专用，默认0x10：0x10分隔符,0x20-URL的key value协议,0x40-json
        const cVersion = Atta.ATTA_API_SCHEMA_SIMPLE;
        // uint64_t lMsgTime;  //消息生成时间
        const lMsgTime = Number(new Date());
        // uint16_t iResLen;   //预留信息长度，默认为0
        const iResLen = 0;
        // uint8_t iAttaIdLen; //AttaId长度
        const iAttaIdLen = sAttaId.toString().length;
        // uint8_t iPwdLen;    //密钥长度
        const iPwdLen = strToken.length;
        // uint8_t iIpLen;     //消息上报IP长度
        const iIpLen = sLocalIp.length;
        // uint32_t iValueLen; //内容长度
        const iValueLen = data.length;
        // uint32_t iTotalLen; //总长度
        const iTotalLen = BODY_OFFSET + iResLen + iAttaIdLen + iPwdLen + iIpLen + iValueLen;
        const sendData = struct_1.default()
            .word32Ube('iTotalLen')
            .word8('iVersion')
            .word8('iSource')
            .word8('cVersion')
            .word64Ube('lMsgTime')
            .word16Ube('iResLen')
            .word8('iAttaIdLen')
            .word8('iPwdLen')
            .word8('iIpLen')
            .word32Ube('iValueLen')
            .chars('sAttaId', iAttaIdLen)
            .chars('sToken', iPwdLen)
            .chars('sLocalIp', iIpLen)
            .chars('sMsgData', iValueLen);
        sendData.allocate();
        const sendBuffer = sendData.buffer();
        const proxy = sendData.fields;
        proxy.iTotalLen = iTotalLen;
        proxy.iVersion = iVersion;
        proxy.iSource = iSource;
        proxy.cVersion = cVersion;
        proxy.lMsgTime = lMsgTime;
        proxy.iResLen = iResLen;
        proxy.iAttaIdLen = iAttaIdLen;
        proxy.iPwdLen = iPwdLen;
        proxy.iIpLen = iIpLen;
        proxy.iValueLen = iValueLen;
        proxy.sAttaId = sAttaId;
        proxy.sToken = sToken;
        proxy.sLocalIp = sLocalIp;
        data.copy(sendBuffer, sendBuffer.length - data.length); // 复制原始的二进制数据至sendBuffer
        if (sendBuffer.length > Atta.MAX_ATTAMSG_LEN) {
            return Atta.M_ATTA_REPORT_CODE_OVER_LIMIT;
        }
        // 发送数据
        if (this.socketType === Atta.M_ATTA_SOCKETTYPE_UDP) {
            return this.senddata_udp(sendBuffer);
        }
        else if (this.socketType === Atta.M_ATTA_SOCKETTYPE_TCP) {
            return this.senddata_tcp(sendBuffer);
        }
        else if (this.socketType === Atta.M_ATTA_SOCKETTYPE_UNIX) {
            return this.senddata_unix(sendBuffer);
        }
        return Atta.M_ATTA_REPORT_CODE_NOT_INIT;
    }
    senddata_udp(sendBuffer) {
        return new Promise(resolve => {
            const client = dgram_1.default.createSocket('udp4');
            const len = sendBuffer.length;
            client.send(sendBuffer, 0, len, this.port, this.ip, (err, bytes) => {
                client.close();
                if (err) {
                    return resolve(Atta.M_ATTA_REPORT_CODE_NET_FAIL);
                }
                if (bytes !== len) {
                    return resolve(Atta.M_ATTA_REPORT_CODE_NET_FAIL);
                }
                resolve(Atta.M_ATTA_REPORT_CODE_SUCCESS);
            });
        });
    }
    senddata_tcp(sendBuffer) {
        return new Promise((resolve, reject) => {
            const client = new net_1.default.Socket();
            client.setTimeout(Atta.TCP_TIMEOUT);
            client.connect(this.port, this.ip, () => {
                client.on('data', (data) => {
                    const readed = data.slice(0, Atta.MAX_ATTAMSG_LEN);
                    const readedLen = readed.length;
                    if (readedLen < Atta.MR_MESSAGE_OFFSET) {
                        client.destroy();
                        return resolve(Atta.M_ATTA_REPORT_CODE_NET_FAIL);
                    }
                    const resData = struct_1.default()
                        .word32Ube('iTotalLen')
                        .word8('iVersion')
                        .word8('iRespCode')
                        .word32Ube('iMsgLen');
                    resData._setBuff(readed);
                    if (readedLen !== resData.fields.iTotalLen) {
                        client.destroy();
                        return resolve(Atta.M_ATTA_REPORT_CODE_NET_FAIL);
                    }
                    if (resData.fields.iRespCode !== Atta.M_ATTA_REPORT_CODE_SUCCESS) {
                        client.destroy();
                        const errMsg = readed[Atta.MR_MESSAGE_OFFSET].toString();
                        const err = new Error(`respCode: ${resData.fields.iRespCode}, error: ${errMsg}`);
                        return reject(err);
                    }
                    client.end();
                    resolve(resData.fields.iRespCode);
                });
                client.write(sendBuffer, (err) => {
                    if (err) {
                        client.destroy();
                        return resolve(Atta.M_ATTA_REPORT_CODE_NET_FAIL);
                    }
                });
            });
            client.on('timeout', () => {
                client.destroy();
            });
            client.on('error', () => {
                client.destroy();
                resolve(Atta.M_ATTA_REPORT_CODE_NET_FAIL);
            });
        });
    }
    senddata_unix(sendBuffer) {
        return new Promise(resolve => {
            const client = new net_1.default.Socket();
            client.setTimeout(Atta.TCP_TIMEOUT);
            client.connect(this.unixPath, () => {
                client.write(sendBuffer, (err) => {
                    if (err) {
                        client.destroy();
                        return resolve(Atta.M_ATTA_REPORT_CODE_NET_FAIL);
                    }
                    client.end();
                    resolve(Atta.M_ATTA_REPORT_CODE_SUCCESS);
                });
            });
            client.on('timeout', () => {
                client.destroy();
            });
            client.on('error', () => {
                client.destroy();
                resolve(Atta.M_ATTA_REPORT_CODE_NET_FAIL);
            });
        });
    }
    escape_string(fieldValue) {
        let fieldLen = fieldValue.length;
        if (fieldLen === 0) {
            return '';
        }
        const data = Buffer.from(fieldValue);
        const dstData = [];
        let currentIndex = 0;
        fieldLen = data.length;
        for (let i = 0; i < fieldLen; i++) {
            const value = data[i];
            switch (value) {
                case Atta.C_ZERO:
                    dstData[currentIndex++] = Atta.C_BACKSLASH;
                    dstData[currentIndex++] = Atta.C_ZERO;
                    break;
                case Atta.C_LINE: // '\n'
                    dstData[currentIndex++] = Atta.C_BACKSLASH;
                    dstData[currentIndex++] = 'n'.charCodeAt(0);
                    break;
                case Atta.C_RETURN: // '\r'
                    dstData[currentIndex++] = Atta.C_BACKSLASH;
                    dstData[currentIndex++] = 'r'.charCodeAt(0);
                    break;
                case Atta.C_BACKSLASH: // \
                    dstData[currentIndex++] = Atta.C_BACKSLASH;
                    dstData[currentIndex++] = Atta.C_BACKSLASH;
                    break;
                default:
                    if (value === Atta.C_VLINE) {
                        dstData[currentIndex++] = Atta.C_BACKSLASH;
                        dstData[currentIndex++] = Atta.C_VLINE;
                    }
                    else {
                        dstData[currentIndex++] = value;
                    }
                    break;
            }
        }
        return Buffer.from(dstData).toString();
    }
    unescape_string(fieldValue) {
        let fieldLen = fieldValue.length;
        if (fieldLen === 0) {
            return '';
        }
        const data = Buffer.from(fieldValue);
        const dstData = [];
        let currentIndex = 0;
        fieldLen = data.length;
        let i = 0;
        for (; i < fieldLen; i++) {
            const value = data[i];
            switch (value) {
                case Atta.C_BACKSLASH:
                    const nextValue = data[i + 1];
                    switch (nextValue) {
                        case Atta.C_ZERO:
                            dstData[currentIndex++] = Atta.C_ZERO;
                            i++;
                            break;
                        case 'n'.charCodeAt(0):
                            dstData[currentIndex++] = Atta.C_LINE;
                            i++;
                            break;
                        case 'r'.charCodeAt(0):
                            dstData[currentIndex++] = Atta.C_RETURN;
                            i++;
                            break;
                        case Atta.C_BACKSLASH:
                            dstData[currentIndex++] = Atta.C_BACKSLASH;
                            i++;
                            break;
                        default:
                            if (nextValue === Atta.C_VLINE) {
                                dstData[currentIndex++] = Atta.C_VLINE;
                                i++;
                            }
                            else {
                                dstData[currentIndex++] = value;
                            }
                            break;
                    }
                    break;
                default:
                    dstData[currentIndex++] = value;
                    break;
            }
        }
        if (i === fieldLen - 1) {
            dstData[currentIndex++] = data[i];
        }
        return Buffer.from(dstData).toString();
    }
    escape_fields(fields) {
        const separator = '|';
        let str = '';
        for (let i = 0; i < fields.length; i++) {
            const fieldValue = fields[i];
            const fmtField = this.escape_string(fieldValue);
            str += fmtField + separator;
        }
        return str.substr(0, str.length - 1);
    }
    unescape_fields(fieldValues) {
        const fields = [];
        let fieldLen = fieldValues.length;
        if (fieldLen === 0) {
            return fields;
        }
        const data = Buffer.from(fieldValues);
        let dstData = [];
        let currentIndex = 0;
        fieldLen = data.length;
        let i = 0;
        for (; i < fieldLen; i++) {
            const value = data[i];
            switch (value) {
                case Atta.C_BACKSLASH:
                    const nextValue = data[i + 1];
                    switch (nextValue) {
                        case Atta.C_ZERO:
                            dstData[currentIndex++] = Atta.C_ZERO;
                            i++;
                            break;
                        case 'n'.charCodeAt(0):
                            dstData[currentIndex++] = Atta.C_LINE;
                            i++;
                            break;
                        case 'r'.charCodeAt(0):
                            dstData[currentIndex++] = Atta.C_RETURN;
                            i++;
                            break;
                        case Atta.C_BACKSLASH:
                            dstData[currentIndex++] = Atta.C_BACKSLASH;
                            i++;
                            break;
                        default:
                            if (nextValue === Atta.C_VLINE) {
                                dstData[currentIndex++] = Atta.C_VLINE;
                                i++;
                            }
                            else {
                                dstData[currentIndex++] = value;
                            }
                            break;
                    }
                    break;
                case Atta.C_VLINE:
                    const fieldValue = Buffer.from(dstData).toString();
                    fields.push(fieldValue);
                    currentIndex = 0;
                    dstData = [];
                    break;
                default:
                    dstData[currentIndex++] = value;
                    break;
            }
        }
        // 最后一个字符
        if (i === fieldLen - 1) {
            const value = data[i];
            if (value === Atta.C_VLINE) {
                const fieldValue = Buffer.from(dstData).toString();
                fields.push(fieldValue, '');
            }
            else {
                dstData[currentIndex++] = data[i];
                const fieldValue = Buffer.from(dstData).toString();
                fields.push(fieldValue);
            }
        }
        return fields;
    }
}
exports.default = Atta;
Atta.ATTA_AGENT_UDP_HOST = '127.0.0.1'; // 本机，暂时不支持给其他机器发UDP包
Atta.ATTA_AGENT_UDP_PORT = 6588; // 默认的UDP端口号
Atta.ATTA_AGENT_UNIX_PATH = '/data/pcgatta/agent/atta_agent.unix'; // Unix domian socket
Atta.ATTA_AGENT_PORTS = '6588,16588,26588,36588,46588,56588,9112,19112,29112,39112,49112,59112,10015,20015,30015,40015,50015,60015';
Atta.M_ATTA_REPORT_CODE_SUCCESS = 0; // 成功
Atta.M_ATTA_REPORT_CODE_INVALID_MSG = -1; // 消息无效
Atta.M_ATTA_REPORT_CODE_OVER_LIMIT = -2; // 消息超长
Atta.M_ATTA_REPORT_CODE_NET_FAIL = -3; // 发送失败
Atta.M_ATTA_REPORT_CODE_NOT_INIT = -4; // 未初始化
Atta.MAX_ATTAMSG_LEN = 131072;
Atta.ATTA_API_SCHEMA_SIMPLE = 0x10; // API内容格式标识：简单协议（分隔符、透传数据）
Atta.ATTA_API_SCHEMA_KV = 0x20; // API内容格式标识：Key-value
Atta.ATTA_API_VER_V1 = 0x01; // API协议版本标识：ATTAAPI V1.0，类型是消息
Atta.ATTA_API_SIGN_V1 = 0x02; // API协议版本标识：ATTAAPI V1.0，类型是签名
Atta.SEPARATOR = '|'; // 分隔符
Atta.API_SOURCE_AT = 3; // ATTA发送
Atta.DEFAULT_CHARSET = 'ISO-8859-1';
Atta.C_ZERO = 0; // 0x00
Atta.C_BACKSLASH = 92; // '\\'
Atta.C_RETURN = 13; // '\r'
Atta.C_LINE = 10; // '\n'
Atta.C_VLINE = 124; // '|'
// uint32_t iTotalLen; //总长度
Atta.TOTALLEN_OFFSET = 0;
// uint8_t iVersion; //版本号，默认0x01
Atta.IVERSION_OFFSET = 4;
// uint8_t iSource;  //消息来源系统，如M_ATTA_SOURCE_AT
Atta.SOURCE_OFFSET = 5;
// uint8_t cVersion; //Boss来源专用，默认0x10：0x10分隔符,0x20-URL的key value协议,0x40-json
Atta.CVERSION_OFFSET = 6;
// uint64_t lMsgTime; //消息生成时间
Atta.MSGTIME_OFFSET = 7;
// uint16_t iResLen; //预留信息长度，默认为0
Atta.RESLEN_OFFSET = 15;
// uint8_t iAttaIdLen; //AttaId长度
Atta.ATTAID_OFFSET = 17;
// uint8_t iPwdLen; //密钥长度
Atta.TOKEN_OFFSET = 18;
// uint8_t iIpLen;  //消息上报IP长度
Atta.IP_OFFSET = 19;
// uint32_t iValueLen; //内容长度
Atta.VALUELEN_OFFSET = 20;
// 包体偏移
Atta.BODY_OFFSET = 24;
// 接收uint32_t iTotalLen; //接收总长度
Atta.MR_TOTALLEN_OFFSET = 0;
// 接收uint8_t iVersion; //版本号，默认0x01
Atta.MR_IVERSION_OFFSET = 4;
// 接收uint8_t iRespCode; //返回值，M_ATTA_REPORT_CODE_SUCCESS  0 //成功
Atta.MR_RESOCODE_OFFSET = 5;
// 接收uint32_t iMsgLen; //错误信息长度
Atta.MR_MSGLEN_OFFSET = 6;
// 接收包体偏移
Atta.MR_MESSAGE_OFFSET = 10;
// 签名响应uint32_t iTotalLen; //总长度
Atta.SR_TOTALLEN_OFFSET = 0;
// 签名响应uint8_t iVersion; //版本号，默认0x02
Atta.SR_IVERSION_OFFSET = 4;
// 签名响应uint64_t lMsgTime; //签名时间戳，毫秒数
Atta.SR_MSGTIME_OFFSET = 5;
// 签名响应uint64_t iSignTime; //签名时间，10进制，高低位置换，如12345改为54321
Atta.SR_SIGNTIME_OFFSET = 13;
// 签名响应包体偏移
Atta.SR_MESSAGE_OFFSET = 21;
Atta.M_ATTA_SOCKETTYPE_UNIX = 0;
Atta.M_ATTA_SOCKETTYPE_TCP = 1;
Atta.M_ATTA_SOCKETTYPE_UDP = 2;
Atta.TCP_TIMEOUT = 8000;
//# sourceMappingURL=data:application/json;base64,