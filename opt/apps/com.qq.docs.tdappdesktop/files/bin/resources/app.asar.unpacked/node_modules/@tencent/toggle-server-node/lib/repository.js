"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var events_1 = require("events");
var storage_1 = require("./storage");
var dtoJce_1 = require("./dtoJce");
var util_1 = require("./util");
var request_1 = require("request");
var constants = require("./constants");
var MAX_RETRY = 3;
var FETCH_SUFFIX = 'feature-with-strategy';
var CONFIG_SUFFIX = 'product-set';
// l5 report code
var l5RetSuccess = 0;
var l5RetHttpClientDoErr = -1;
// incremental update default timestamp
var TimeStampNeedFullUpdate = 0;
// request type
var SET = 'set';
var FETCH = 'fetch';
var Repository = /** @class */ (function (_super) {
    __extends(Repository, _super);
    function Repository(_a) {
        var productEn = _a.productEn, productId = _a.productId, moduleId = _a.moduleId, version = _a.version, accessDomain = _a.accessDomain, backupPath = _a.backupPath, refreshInterval = _a.refreshInterval, timeout = _a.timeout, _b = _a.StorageImpl, StorageImpl = _b === void 0 ? storage_1.Storage : _b, useL5 = _a.useL5, configL5ModId = _a.configL5ModId, configL5CmdId = _a.configL5CmdId;
        var _this = _super.call(this) || this;
        _this.productEn = productEn;
        _this.productId = productId;
        _this.moduleId = moduleId;
        _this.version = version;
        _this.accessDomain = accessDomain;
        _this.refreshInterval = refreshInterval;
        _this.timeout = timeout;
        // l5
        _this.useL5 = useL5;
        _this.accessSet = {
            l5ModId: String(configL5ModId),
            l5CmdId: String(configL5CmdId),
        };
        _this.configL5ModId = configL5ModId;
        _this.configL5CmdId = configL5CmdId;
        // incremental update
        _this.lastUpdateTimeStamp = TimeStampNeedFullUpdate;
        _this.featureSimpleMap = {};
        _this.tabMetaData = {
            guid: '',
            appId: '',
        };
        _this.expCache = {};
        _this.storage = new StorageImpl({ backupPath: backupPath, productEn: productEn, moduleId: moduleId });
        _this.storage.on('error', function (err) { return _this.emit('error', err); });
        _this.storage.on('ready', function () {
            _this.emit('ready');
        });
        _this.inited = false;
        if (_this.refreshInterval !== undefined && _this.refreshInterval > 0) {
            _this.setRefreshInterval(_this.refreshInterval);
        }
        process.nextTick(function () { return _this.getSetConfig(); });
        return _this;
    }
    Repository.prototype.stop = function () {
        if (this.timer) {
            clearInterval(this.timer);
        }
        this.removeAllListeners();
        this.storage.removeAllListeners();
    };
    Repository.prototype.getToggle = function (name) {
        return this.storage.get(name);
    };
    Repository.prototype.getPrerequisite = function (id) {
        return this.storage.getPrerequisite(id);
    };
    Repository.prototype.getToggles = function () {
        var toggles = this.storage.getAll();
        return Object.keys(toggles).map(function (key) { return toggles[key]; });
    };
    Repository.prototype.activateExperiment = function (guid, appId, expData) {
        var _this = this;
        this.tabMetaData = {
            guid: guid,
            appId: appId,
        };
        expData.forEach(function (expInfo) {
            _this.expCache[expInfo.layerCode] = expInfo;
        });
    };
    Repository.prototype.getTabMetaData = function () {
        return this.tabMetaData;
    };
    Repository.prototype.getExpInfoByExpId = function (expId) {
        return this.expCache[expId];
    };
    Repository.prototype.getSetConfig = function () {
        return __awaiter(this, void 0, void 0, function () {
            var querySetReq, buf, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        querySetReq = new dtoJce_1.dto.QueryProductSetReq();
                        querySetReq.readFromObject({
                            productId: this.productId,
                        });
                        return [4 /*yield*/, util_1.packRequest(querySetReq)];
                    case 1:
                        buf = _a.sent();
                        // Req function
                        this.doPost(buf, SET, MAX_RETRY);
                        return [3 /*break*/, 3];
                    case 2:
                        err_1 = _a.sent();
                        this.emit('warn', err_1);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    Repository.prototype.fetch = function () {
        return __awaiter(this, void 0, void 0, function () {
            var ids, queryFeatureReq, buf, err_2;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        // If no accessSet or no set name,
                        // or use L5 but no L5 mod id or L5 cmd id, retry getting set config.
                        if (!this.accessSet
                            || !this.accessSet.setName
                            || (this.useL5 && (!this.accessSet.l5ModId || !this.accessSet.l5CmdId))) {
                            this.emit('warn', new Error('Query features with incorrect set config'));
                            return [2 /*return*/, process.nextTick(function () { return _this.getSetConfig(); })];
                        }
                        ids = this.getLocalIdList();
                        queryFeatureReq = new dtoJce_1.dto.QueryFeatureReq();
                        queryFeatureReq.readFromObject({
                            productId: this.productId,
                            moduleId: this.moduleId,
                            moduleVersion: this.version,
                            timestamp: this.lastUpdateTimeStamp,
                            localIdList: ids,
                        });
                        return [4 /*yield*/, util_1.packRequest(queryFeatureReq)];
                    case 1:
                        buf = _a.sent();
                        // Req function
                        this.doPost(buf, FETCH, MAX_RETRY);
                        return [3 /*break*/, 3];
                    case 2:
                        err_2 = _a.sent();
                        this.emit('warn', err_2);
                        return [3 /*break*/, 3];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    Repository.prototype.doPost = function (payload, type, retry) {
        return __awaiter(this, void 0, void 0, function () {
            var l5Config_1, domain, url, start_1, err_3;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 4, , 5]);
                        domain = void 0;
                        if (!this.useL5) return [3 /*break*/, 2];
                        return [4 /*yield*/, util_1.getL5(+(this.accessSet.l5ModId || this.configL5ModId), +(this.accessSet.l5CmdId || this.configL5CmdId))];
                    case 1:
                        l5Config_1 = _a.sent();
                        domain = "http://" + l5Config_1.ip + ":" + l5Config_1.port;
                        return [3 /*break*/, 3];
                    case 2:
                        domain = this.accessDomain;
                        _a.label = 3;
                    case 3:
                        url = void 0;
                        if (type === SET) {
                            url = domain + "/" + CONFIG_SUFFIX;
                        }
                        else {
                            url = domain + "/" + this.accessSet.setName + "/" + FETCH_SUFFIX;
                        }
                        start_1 = Date.now();
                        request_1.post({
                            url: url,
                            headers: util_1.getCommonHeaders(this.productEn),
                            body: payload,
                            encoding: null,
                            timeout: this.timeout,
                        }, function (err, resp, body) { return __awaiter(_this, void 0, void 0, function () {
                            var l5Ret, err_4;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        _a.trys.push([0, 2, , 3]);
                                        // Report L5
                                        if (this.useL5 && l5Config_1) {
                                            l5Ret = err
                                                ? l5RetHttpClientDoErr
                                                : resp.statusCode >= constants.HTTP_SERVER_ERROR_CODE
                                                    ? -resp.statusCode
                                                    : l5RetSuccess;
                                            util_1.reportL5(l5Config_1, Date.now() - start_1, l5Ret);
                                        }
                                        // Return on err request
                                        if (err) {
                                            return [2 /*return*/, this.emit('warn', err)];
                                        }
                                        // Retry on 5xx resp
                                        if (resp.statusCode >= constants.HTTP_SERVER_ERROR_CODE && retry >= 1) {
                                            retry = retry - 1;
                                            return [2 /*return*/, this.doPost(payload, type, retry)];
                                        }
                                        // Retry getting set config on 404 for fetch request
                                        if (type === FETCH && resp.statusCode === constants.HTTP_NOT_FOUND_CODE) {
                                            this.emit('warn', new Error("Fetch response statusCode was " + resp.statusCode + ", msg: " + body.msg));
                                            return [2 /*return*/, this.getSetConfig()];
                                        }
                                        // Emit error on non-200 resp
                                        if (resp.statusCode !== constants.HTTP_OK_CODE) {
                                            return [2 /*return*/, this.emit('warn', new Error("Config response statusCode was " + resp.statusCode))];
                                        }
                                        return [4 /*yield*/, this.dealWithSuccessRequest(type, body)];
                                    case 1: 
                                    // Successful request
                                    return [2 /*return*/, _a.sent()];
                                    case 2:
                                        err_4 = _a.sent();
                                        this.emit('warn', err_4);
                                        return [3 /*break*/, 3];
                                    case 3: return [2 /*return*/];
                                }
                            });
                        }); });
                        return [3 /*break*/, 5];
                    case 4:
                        err_3 = _a.sent();
                        this.emit('warn', err_3);
                        return [3 /*break*/, 5];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    Repository.prototype.dealWithSuccessRequest = function (type, body) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(type === SET)) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.dealResponseOfSet(body)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        if (!(type === FETCH)) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.dealResponseOfFetch(body)];
                    case 3: return [2 /*return*/, _a.sent()];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    Repository.prototype.dealResponseOfSet = function (body) {
        return __awaiter(this, void 0, void 0, function () {
            var setResp, respData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, util_1.unpackResponse(body, dtoJce_1.dto.QueryProductSetResp)];
                    case 1:
                        setResp = _a.sent();
                        respData = setResp.toObject();
                        if (respData.data && respData.data.setName) {
                            // accessSet unchanged
                            if (this.accessSet.setName === respData.data.setName
                                && this.accessSet.l5ModId === respData.data.l5ModId
                                && this.accessSet.l5CmdId === respData.data.l5CmdId) {
                                return [2 /*return*/];
                            }
                            // otherwise, set accessSet
                            this.accessSet = respData.data;
                            return [2 /*return*/, this.fetch()];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Repository.prototype.dealResponseOfFetch = function (body) {
        return __awaiter(this, void 0, void 0, function () {
            var queryFeatureResp, respData, accessSet;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, util_1.unpackResponse(body, dtoJce_1.dto.QueryFeatureWithStrategyResp)];
                    case 1:
                        queryFeatureResp = _a.sent();
                        respData = queryFeatureResp.toObject();
                        if (respData.code === constants.SET_MIGRATION_CODE && respData.setName) {
                            accessSet = JSON.parse(respData.setName) || {};
                            this.accessSet = {
                                setName: accessSet.TafSet,
                                l5ModId: accessSet.L5ModId,
                                l5CmdId: accessSet.L5CmdId,
                            };
                            return [2 /*return*/, this.fetch()];
                        }
                        if (respData.nextTime !== undefined && respData.nextTime > 0) {
                            this.setRefreshInterval(respData.nextTime * 1000);
                        }
                        util_1.configureServerTimeDiff(respData.serverTime);
                        this.updateStorageAndEmitChanges(respData);
                        // Emit ready on first fetch if it is finished before initializing from local storage
                        if (!this.inited) {
                            this.inited = true;
                            this.emit('ready');
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    Repository.prototype.updateStorageAndEmitChanges = function (respData) {
        var _this = this;
        var data = respData.data || [];
        var prerequisites = respData.prerequisites || [];
        var featureMap = this.mapNameToFeature(data);
        var prerequisiteMap = this.mapVersionIdToFeature(prerequisites);
        var featureSimpleMap = this.mapIdToFeatureName(data);
        var storageData = {
            featureData: featureMap,
            prerequisite: prerequisiteMap,
        };
        var isFullUpdate = false;
        var patch;
        var removed = [];
        // increment field determines whether to do incremental update
        if (!respData.increment) {
            // summarize changes
            patch = data;
            isFullUpdate = true;
            // full update
            this.storage.reset(storageData);
            this.featureSimpleMap = featureSimpleMap;
        }
        else {
            var toDelete = respData.deletedFeatures || [];
            // summarize changes
            patch = data;
            removed = toDelete.map(function (id) { return _this.getToggle(_this.featureSimpleMap[id] || ''); }).filter(function (d) { return d; });
            // incremental update
            this.storage.incUpdate(featureMap, prerequisiteMap, this.featureSimpleMap, toDelete);
            this.incUpdateSimpleMap(featureSimpleMap, toDelete);
        }
        this.lastUpdateTimeStamp = respData.timestamp || TimeStampNeedFullUpdate;
        var changes = { isFullUpdate: isFullUpdate, patch: patch, removed: removed };
        this.emit('change', changes);
        // Keep the original data event, with lower priority
        process.nextTick(function () { return _this.emit('data', _this.getToggles()); });
    };
    Repository.prototype.mapNameToFeature = function (data) {
        var featureMap = {};
        data.forEach(function (d) {
            if (d.name !== undefined) {
                featureMap[d.name] = d;
            }
        });
        return featureMap;
    };
    Repository.prototype.mapVersionIdToFeature = function (prerequisites) {
        var prerequisiteMap = {};
        prerequisites.forEach(function (d) {
            if (d.id !== undefined) {
                prerequisiteMap[d.id] = d;
            }
        });
        return prerequisiteMap;
    };
    Repository.prototype.mapIdToFeatureName = function (data) {
        var featureSimpleMap = {};
        data.forEach(function (d) {
            if (d.id && d.name) {
                featureSimpleMap[d.id] = d.name;
            }
        });
        return featureSimpleMap;
    };
    Repository.prototype.getLocalIdList = function () {
        if (this.lastUpdateTimeStamp === TimeStampNeedFullUpdate) {
            return [];
        }
        var ids = [];
        for (var _i = 0, _a = Object.keys(this.featureSimpleMap); _i < _a.length; _i++) {
            var id = _a[_i];
            ids.push(+id);
        }
        return ids;
    };
    Repository.prototype.incUpdateSimpleMap = function (featureToUpdate, featureToDelete) {
        if (!this.featureSimpleMap || Object.keys(this.featureSimpleMap).length === 0) {
            return (this.featureSimpleMap = featureToUpdate);
        }
        // add and update
        for (var _i = 0, _a = Object.keys(featureToUpdate); _i < _a.length; _i++) {
            var id = _a[_i];
            this.featureSimpleMap[+id] = featureToUpdate[+id];
        }
        // delete
        for (var _b = 0, featureToDelete_1 = featureToDelete; _b < featureToDelete_1.length; _b++) {
            var id = featureToDelete_1[_b];
            delete this.featureSimpleMap[id];
        }
    };
    Repository.prototype.setRefreshInterval = function (interval) {
        var _this = this;
        this.refreshInterval = interval;
        if (this.timer) {
            clearInterval(this.timer);
        }
        this.timer = setInterval(function () {
            _this.fetch();
        }, interval);
        if (process.env.NODE_ENV !== 'test') {
            this.timer.unref();
        }
    };
    return Repository;
}(events_1.EventEmitter));
exports.default = Repository;
//# sourceMappingURL=repository.js.map