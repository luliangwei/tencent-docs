"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomKVPropertyStrategy = void 0;
var strategy_1 = require("./strategy");
var constants = require("../constants");
var helper_1 = require("./helper");
var CustomKVPropertyStrategy = /** @class */ (function (_super) {
    __extends(CustomKVPropertyStrategy, _super);
    function CustomKVPropertyStrategy() {
        return _super.call(this, 'customKVProperty') || this;
    }
    CustomKVPropertyStrategy.prototype.isEnabled = function (parameters, context) {
        var listType = helper_1.getListType(parameters);
        var matchType = constants.MATCH_TYPE_EQUAL;
        if (parameters.matchType && typeof JSON.parse(parameters.matchType) === 'string') {
            if (JSON.parse(parameters.matchType) === constants.MATCH_TYPE_REG) {
                matchType = constants.MATCH_TYPE_REG;
            }
        }
        if (!parameters.propertyMap) {
            return listType === constants.BLACK_LIST;
        }
        var propertyMapStr = JSON.parse(parameters.propertyMap);
        var propertyMap = JSON.parse(propertyMapStr);
        if (!context.properties) {
            return listType === constants.BLACK_LIST;
        }
        for (var propertyKey in propertyMap) {
            if (!context.properties[propertyKey]) {
                return listType === constants.BLACK_LIST;
            }
            if (this.matchPropertyList(propertyMap[propertyKey], context.properties[propertyKey], matchType)) {
                continue;
            }
            // context properties no match
            return listType === constants.BLACK_LIST;
        }
        // context properties all match
        return listType === constants.WHITE_LIST;
    };
    CustomKVPropertyStrategy.prototype.matchPropertyList = function (propertyList, contextValue, matchType) {
        for (var _i = 0, propertyList_1 = propertyList; _i < propertyList_1.length; _i++) {
            var property = propertyList_1[_i];
            if (matchType === constants.MATCH_TYPE_REG) {
                if (contextValue.search(property) >= 0) {
                    return true;
                }
            }
            else {
                if (property === contextValue) {
                    return true;
                }
            }
        }
        return false;
    };
    return CustomKVPropertyStrategy;
}(strategy_1.Strategy));
exports.CustomKVPropertyStrategy = CustomKVPropertyStrategy;
//# sourceMappingURL=custom-kv-property.js.map