// **********************************************************************
// This file was generated by a TAF parser!
// TAF version 3.1.1.2 by WSRD Tencent.
// Generated from `/data/tafnode/data/MTT.NodejsUtilServer/bin/src/uploads/1433314701191/in/NodeJsComm.jce'
// **********************************************************************
/*global assert*/
var TafStream = require('../../libjce');
var TafError  = require('../../../taf-rpc').error;

var TRom = TRom || {};
module.exports.TRom = TRom;

TRom.NodeJsCommProxy = function () {
    this._name   = undefined;
    this._worker = undefined;
}

TRom.NodeJsCommProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
}

TRom.NodeJsCommProxy.prototype.getTimeout = function ( ) {
    return this._worker.timeout;
}


TRom.User_t = function() {
    this.id = 0;
    this.score = 0;
    this.name = "";
    this._classname = "TRom.User_t";
};
TRom.User_t._classname = "TRom.User_t";

TRom.User_t._write = function (os, tag, value) { os.writeStruct(tag, value); }
TRom.User_t._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
TRom.User_t._readFrom = function (is) {
    var tmp = new TRom.User_t();
    tmp.id = is.readInt32(0, false, 0);
    tmp.score = is.readInt32(1, false, 0);
    tmp.name = is.readString(2, false, "");
    return tmp;
};
TRom.User_t.prototype._writeTo = function (os) {
    os.writeInt32(0, this.id);
    os.writeInt32(1, this.score);
    os.writeString(2, this.name);
};
TRom.User_t.prototype._equal = function () {
    assert(false, 'this structure not define key operation');
}
TRom.User_t.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
TRom.User_t.prototype.toObject = function() {
    var tmp = {};

    tmp.id = this.id;
    tmp.score = this.score;
    tmp.name = this.name;

    return tmp;
}
TRom.User_t.prototype.readFromObject = function(json) {
    !json.hasOwnProperty("id") || (this.id = json.id);
    !json.hasOwnProperty("score") || (this.score = json.score);
    !json.hasOwnProperty("name") || (this.name = json.name);
}
TRom.User_t.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
TRom.User_t.new = function () {
    return new TRom.User_t();
}
TRom.User_t.create = function (is) {
    return TRom.User_t._readFrom(is);
}
TRom.Result_t = function() {
    this.id = 0;
    this.iLevel = 0;
    this._classname = "TRom.Result_t";
};
TRom.Result_t._classname = "TRom.Result_t";

TRom.Result_t._write = function (os, tag, value) { os.writeStruct(tag, value); }
TRom.Result_t._read  = function (is, tag, def) { return is.readStruct(tag, true, def); }
TRom.Result_t._readFrom = function (is) {
    var tmp = new TRom.Result_t();
    tmp.id = is.readInt32(0, false, 0);
    tmp.iLevel = is.readInt32(1, false, 0);
    return tmp;
};
TRom.Result_t.prototype._writeTo = function (os) {
    os.writeInt32(0, this.id);
    os.writeInt32(1, this.iLevel);
};
TRom.Result_t.prototype._equal = function () {
    assert(false, 'this structure not define key operation');
}
TRom.Result_t.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = 'STRUCT' + Math.random();
    }
    return this._proto_struct_name_;
}
TRom.Result_t.prototype.toObject = function() {
    var tmp = {};

    tmp.id = this.id;
    tmp.iLevel = this.iLevel;

    return tmp;
}
TRom.Result_t.prototype.readFromObject = function(json) {
    !json.hasOwnProperty("id") || (this.id = json.id);
    !json.hasOwnProperty("iLevel") || (this.iLevel = json.iLevel);
}
TRom.Result_t.prototype.toBinBuffer = function () {
    var os = new TafStream.JceOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
}
TRom.Result_t.new = function () {
    return new TRom.Result_t();
}
TRom.Result_t.create = function (is) {
    return TRom.Result_t._readFrom(is);
}

TRom.NodeJsCommProxy.prototype.getUsrName = function (sUsrName) {
    var _encode = function () {
        var os = new TafStream.JceOutputStream();
        os.writeString(1, sUsrName);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        var response;
        try {
            response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.sValue1 = is.readString(2, true, TafStream.String);
            response.arguments.sValue2 = is.readString(3, true, TafStream.String);

            return {request:data.request, response:response};
        } catch (e) {
            response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('getUsrName', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

TRom.NodeJsCommProxy.prototype.getall = function (stUser) {
    var _encode = function () {
        var os = new TafStream.JceOutputStream();
        os.writeStruct(1, stUser);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        var response;
        try {
            response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.stResult = is.readStruct(2, true, TRom.Result_t);

            return {request:data.request, response:response};
        } catch (e) {
            response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('getall', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

TRom.NodeJsCommProxy.prototype.secRequest = function (binRequest) {
    var _encode = function () {
        var os = new TafStream.JceOutputStream();
        os.writeBytes(1, binRequest);
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        var response;
        try {
            response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);
            response.arguments.binResponse = is.readBytes(2, true, TafStream.BinBuffer);

            return {request:data.request, response:response};
        } catch (e) {
            response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('secRequest', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}

TRom.NodeJsCommProxy.prototype.test = function () {
    var _encode = function () {
        var os = new TafStream.JceOutputStream();
        return os.getBinBuffer();
    }

    var _decode = function (data) {
        var response;
        try {
            response = {arguments:{}};
            var is = new TafStream.JceInputStream(data.response.sBuffer);

            response.costtime = data.request.costtime;
            response.return   = is.readInt32(0, true, TafStream.Int32);

            return {request:data.request, response:response};
        } catch (e) {
            response = { };
            response.costtime      = data.request.costtime;
            response.error         = {};
            response.error.code    = TafError.CLIENT.DECODE_ERROR;
            response.error.message = e.message;

            throw { request : data.request, response : response};
        }
    }

    var _error = function(data) {
        var response = {};
        response.costtime = data.request.costtime;
        response.error    = data.error;

        throw {request:data.request, response:response};
    }

    return this._worker.taf_invoke('test', _encode(), arguments.length != 0?arguments[arguments.length - 1]:undefined).then(_decode, _error);
}